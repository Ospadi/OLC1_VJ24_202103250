
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.Casteo;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Match;
import instrucciones.Case;
import instrucciones.DeclaracionVector;
import instrucciones.AsignacionVector2D;
import instrucciones.DeclaracionVector2D;
import instrucciones.DeclaracionLista;
import instrucciones.AppendLista;
import instrucciones.RemoveLista;
import instrucciones.Asignacion;
import instrucciones.FuncionRound;
import instrucciones.FuncionLength;
import instrucciones.FuncionToString;
import instrucciones.FuncionFind;
import instrucciones.Metodo;
import instrucciones.Llamada;
import instrucciones.Execute;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVar;
import expresiones.Incremento;
import expresiones.Decremento;
import expresiones.AccesoVector2D;
import expresiones.Acceso;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\023" +
    "\007\000\002\025\004\000\002\025\003\000\002\024\007" +
    "\000\002\024\007\000\002\005\007\000\002\006\007\000" +
    "\002\006\011\000\002\006\007\000\002\006\011\000\002" +
    "\015\014\000\002\007\006\000\002\010\011\000\002\010" +
    "\015\000\002\010\013\000\002\011\011\000\002\012\013" +
    "\000\002\017\004\000\002\020\004\000\002\016\005\000" +
    "\002\016\003\000\002\016\003\000\002\021\004\000\002" +
    "\022\004\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\004\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\004\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\006\000\002\014\005" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\026\015\000\002\026\015\000\002\032\005\000\002\032" +
    "\003\000\002\027\017\000\002\027\017\000\002\030\014" +
    "\000\002\031\011\000\002\033\007\000\002\033\005\000" +
    "\002\034\015\000\002\035\011\000\002\036\011\000\002" +
    "\040\011\000\002\037\006\000\002\041\006\000\002\042" +
    "\006\000\002\043\006\000\002\044\010\000\002\045\012" +
    "\000\002\045\011\000\002\046\006\000\002\046\004\000" +
    "\002\047\010\000\002\047\007\000\002\051\007\000\002" +
    "\051\006\000\002\050\005\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0139\000\052\003\033\007\031\011\037\012\012\014" +
    "\061\053\057\054\014\055\025\056\024\057\007\060\005" +
    "\061\006\062\030\064\021\065\046\066\016\067\060\074" +
    "\047\104\040\105\062\001\002\000\004\007\u012c\001\002" +
    "\000\016\007\uffc9\013\uffc9\027\uffc9\032\uffc9\036\uffc9\043" +
    "\uffc9\001\002\000\004\007\u0117\001\002\000\016\007\uffca" +
    "\013\uffca\027\uffca\032\uffca\036\uffca\043\uffca\001\002\000" +
    "\056\002\ufff7\003\ufff7\007\ufff7\011\ufff7\012\ufff7\014\ufff7" +
    "\026\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7" +
    "\074\ufff7\104\ufff7\105\ufff7\001\002\000\056\002\uffe9\003" +
    "\uffe9\007\uffe9\011\uffe9\012\uffe9\014\uffe9\026\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\074\uffe9\104\uffe9" +
    "\105\uffe9\001\002\000\004\013\u0116\001\002\000\056\002" +
    "\ufff6\003\ufff6\007\ufff6\011\ufff6\012\ufff6\014\ufff6\026\ufff6" +
    "\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061" +
    "\ufff6\062\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\074\ufff6" +
    "\104\ufff6\105\ufff6\001\002\000\016\007\uffcd\013\uffcd\027" +
    "\uffcd\032\uffcd\036\uffcd\043\uffcd\001\002\000\056\002\ufffe" +
    "\003\ufffe\007\ufffe\011\ufffe\012\ufffe\014\ufffe\026\ufffe\053" +
    "\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe" +
    "\062\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\074\ufffe\104" +
    "\ufffe\105\ufffe\001\002\000\004\031\u0107\001\002\000\054" +
    "\002\000\003\033\007\031\011\037\012\012\014\061\053" +
    "\057\054\014\055\025\056\024\057\007\060\005\061\006" +
    "\062\030\064\021\065\046\066\016\067\060\074\047\104" +
    "\040\105\062\001\002\000\056\002\ufff2\003\ufff2\007\ufff2" +
    "\011\ufff2\012\ufff2\014\ufff2\026\ufff2\053\ufff2\054\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\067\ufff2\074\ufff2\104\ufff2\105\ufff2\001" +
    "\002\000\034\004\071\005\107\006\072\007\102\010\066" +
    "\017\065\031\075\050\074\070\111\071\106\077\105\100" +
    "\110\101\101\001\002\000\056\002\ufff1\003\ufff1\007\ufff1" +
    "\011\ufff1\012\ufff1\014\ufff1\026\ufff1\053\ufff1\054\ufff1\055" +
    "\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\064\ufff1" +
    "\065\ufff1\066\ufff1\067\ufff1\074\ufff1\104\ufff1\105\ufff1\001" +
    "\002\000\056\002\uffec\003\uffec\007\uffec\011\uffec\012\uffec" +
    "\014\uffec\026\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066\uffec" +
    "\067\uffec\074\uffec\104\uffec\105\uffec\001\002\000\016\007" +
    "\uffcb\013\uffcb\027\uffcb\032\uffcb\036\uffcb\043\uffcb\001\002" +
    "\000\016\007\uffcc\013\uffcc\027\uffcc\032\uffcc\036\uffcc\043" +
    "\uffcc\001\002\000\004\013\366\001\002\000\056\002\uffee" +
    "\003\uffee\007\uffee\011\uffee\012\uffee\014\uffee\026\uffee\053" +
    "\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee" +
    "\062\uffee\064\uffee\065\uffee\066\uffee\067\uffee\074\uffee\104" +
    "\uffee\105\uffee\001\002\000\004\031\353\001\002\000\016" +
    "\027\311\031\313\034\316\035\315\036\314\072\312\001" +
    "\002\000\056\002\uffeb\003\uffeb\007\uffeb\011\uffeb\012\uffeb" +
    "\014\uffeb\026\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\062\uffeb\064\uffeb\065\uffeb\066\uffeb" +
    "\067\uffeb\074\uffeb\104\uffeb\105\uffeb\001\002\000\004\013" +
    "\310\001\002\000\004\013\307\001\002\000\056\002\ufff0" +
    "\003\ufff0\007\ufff0\011\ufff0\012\ufff0\014\ufff0\026\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0" +
    "\062\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\074\ufff0\104" +
    "\ufff0\105\ufff0\001\002\000\056\002\ufff8\003\ufff8\007\ufff8" +
    "\011\ufff8\012\ufff8\014\ufff8\026\ufff8\053\ufff8\054\ufff8\055" +
    "\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\067\ufff8\074\ufff8\104\ufff8\105\ufff8\001" +
    "\002\000\004\013\306\001\002\000\016\007\uffc8\013\uffc8" +
    "\027\uffc8\032\uffc8\036\uffc8\043\uffc8\001\002\000\056\002" +
    "\ufffb\003\ufffb\007\ufffb\011\ufffb\012\ufffb\014\ufffb\026\ufffb" +
    "\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\074\ufffb" +
    "\104\ufffb\105\ufffb\001\002\000\056\002\ufff3\003\ufff3\007" +
    "\ufff3\011\ufff3\012\ufff3\014\ufff3\026\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\064" +
    "\ufff3\065\ufff3\066\ufff3\067\ufff3\074\ufff3\104\ufff3\105\ufff3" +
    "\001\002\000\056\002\ufffc\003\ufffc\007\ufffc\011\ufffc\012" +
    "\ufffc\014\ufffc\026\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc" +
    "\057\ufffc\060\ufffc\061\ufffc\062\ufffc\064\ufffc\065\ufffc\066" +
    "\ufffc\067\ufffc\074\ufffc\104\ufffc\105\ufffc\001\002\000\056" +
    "\002\uffed\003\uffed\007\uffed\011\uffed\012\uffed\014\uffed\026" +
    "\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed" +
    "\061\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067\uffed\074" +
    "\uffed\104\uffed\105\uffed\001\002\000\056\002\ufff9\003\ufff9" +
    "\007\ufff9\011\ufff9\012\ufff9\014\ufff9\026\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9" +
    "\064\ufff9\065\ufff9\066\ufff9\067\ufff9\074\ufff9\104\ufff9\105" +
    "\ufff9\001\002\000\004\031\300\001\002\000\004\041\266" +
    "\001\002\000\056\002\uffef\003\uffef\007\uffef\011\uffef\012" +
    "\uffef\014\uffef\026\uffef\053\uffef\054\uffef\055\uffef\056\uffef" +
    "\057\uffef\060\uffef\061\uffef\062\uffef\064\uffef\065\uffef\066" +
    "\uffef\067\uffef\074\uffef\104\uffef\105\uffef\001\002\000\056" +
    "\002\ufffd\003\ufffd\007\ufffd\011\ufffd\012\ufffd\014\ufffd\026" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd" +
    "\061\ufffd\062\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\074" +
    "\ufffd\104\ufffd\105\ufffd\001\002\000\056\002\uffe8\003\uffe8" +
    "\007\uffe8\011\uffe8\012\uffe8\014\uffe8\026\uffe8\053\uffe8\054" +
    "\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\067\uffe8\074\uffe8\104\uffe8\105" +
    "\uffe8\001\002\000\056\002\uffe7\003\uffe7\007\uffe7\011\uffe7" +
    "\012\uffe7\014\uffe7\026\uffe7\053\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\064\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\074\uffe7\104\uffe7\105\uffe7\001\002\000" +
    "\056\002\ufffa\003\ufffa\007\ufffa\011\ufffa\012\ufffa\014\ufffa" +
    "\026\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\062\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa" +
    "\074\ufffa\104\ufffa\105\ufffa\001\002\000\004\002\265\001" +
    "\002\000\056\002\uffea\003\uffea\007\uffea\011\uffea\012\uffea" +
    "\014\uffea\026\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057" +
    "\uffea\060\uffea\061\uffea\062\uffea\064\uffea\065\uffea\066\uffea" +
    "\067\uffea\074\uffea\104\uffea\105\uffea\001\002\000\004\007" +
    "\226\001\002\000\004\025\215\001\002\000\004\031\211" +
    "\001\002\000\004\007\063\001\002\000\004\031\064\001" +
    "\002\000\036\004\071\005\107\006\072\007\102\010\066" +
    "\017\065\031\075\032\077\050\074\070\111\071\106\077" +
    "\105\100\110\101\101\001\002\000\034\004\071\005\107" +
    "\006\072\007\102\010\066\017\065\031\075\050\074\070" +
    "\111\071\106\077\105\100\110\101\101\001\002\000\054" +
    "\013\uffb2\015\uffb2\016\uffb2\017\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\030\uffb2\032\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\051\uffb2\001\002\000\054\013\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\030" +
    "\uffaa\032\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\047\uffaa\051\uffaa\001\002\000" +
    "\054\013\uffa8\015\uffa8\016\uffa8\017\uffa8\021\uffa8\022\uffa8" +
    "\023\uffa8\024\uffa8\025\uffa8\030\uffa8\032\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\047\uffa8\051\uffa8\001\002\000\054\013\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\030\uffb4\032\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\051\uffb4\001\002" +
    "\000\054\013\uffb5\015\uffb5\016\uffb5\017\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\030\uffb5\032\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\051\uffb5\001\002\000\054\013\uffab\015\uffab" +
    "\016\uffab\017\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\030\uffab\032\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\051\uffab\001" +
    "\002\000\034\004\071\005\107\006\072\007\102\010\066" +
    "\017\065\031\075\050\074\070\111\071\106\077\105\100" +
    "\110\101\101\001\002\000\050\004\071\005\107\006\072" +
    "\007\102\010\066\017\065\031\075\050\074\054\014\055" +
    "\025\056\024\057\007\060\005\070\111\071\106\077\105" +
    "\100\110\101\101\104\040\001\002\000\054\013\uffac\015" +
    "\uffac\016\uffac\017\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\030\uffac\032\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\051\uffac" +
    "\001\002\000\004\013\201\001\002\000\054\013\uffa9\015" +
    "\uffa9\016\uffa9\017\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9" +
    "\025\uffa9\030\uffa9\032\uffa9\037\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\051\uffa9" +
    "\001\002\000\004\031\176\001\002\000\060\013\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\027\163\030\uffb3\032\uffb3\037\uffb3\040\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\051\uffb3\072\164\001\002\000\006\015\157\032\160\001" +
    "\002\000\054\013\uffad\015\uffad\016\uffad\017\uffad\021\uffad" +
    "\022\uffad\023\uffad\024\uffad\025\uffad\030\uffad\032\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\051\uffad\001\002\000\004\031\154\001" +
    "\002\000\054\013\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\030\uffb0\032\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\uffb0\051\uffb0\001\002\000\054\013\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\030\uffb6\032\uffb6\037\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\051\uffb6" +
    "\001\002\000\004\031\151\001\002\000\054\013\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\025\uffb1\030\uffb1\032\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\051\uffb1" +
    "\001\002\000\044\015\uff8b\016\123\017\115\021\120\022" +
    "\125\023\116\024\127\032\uff8b\037\131\040\126\041\117" +
    "\042\121\043\124\044\122\045\130\046\113\047\114\001" +
    "\002\000\034\004\071\005\107\006\072\007\102\010\066" +
    "\017\065\031\075\050\074\070\111\071\106\077\105\100" +
    "\110\101\101\001\002\000\034\004\071\005\107\006\072" +
    "\007\102\010\066\017\065\031\075\050\074\070\111\071" +
    "\106\077\105\100\110\101\101\001\002\000\034\004\071" +
    "\005\107\006\072\007\102\010\066\017\065\031\075\050" +
    "\074\070\111\071\106\077\105\100\110\101\101\001\002" +
    "\000\034\004\071\005\107\006\072\007\102\010\066\017" +
    "\065\031\075\050\074\070\111\071\106\077\105\100\110" +
    "\101\101\001\002\000\034\004\071\005\107\006\072\007" +
    "\102\010\066\017\065\031\075\050\074\070\111\071\106" +
    "\077\105\100\110\101\101\001\002\000\034\004\071\005" +
    "\107\006\072\007\102\010\066\017\065\031\075\050\074" +
    "\070\111\071\106\077\105\100\110\101\101\001\002\000" +
    "\034\004\071\005\107\006\072\007\102\010\066\017\065" +
    "\031\075\050\074\070\111\071\106\077\105\100\110\101" +
    "\101\001\002\000\034\004\071\005\107\006\072\007\102" +
    "\010\066\017\065\031\075\050\074\070\111\071\106\077" +
    "\105\100\110\101\101\001\002\000\034\004\071\005\107" +
    "\006\072\007\102\010\066\017\065\031\075\050\074\070" +
    "\111\071\106\077\105\100\110\101\101\001\002\000\034" +
    "\004\071\005\107\006\072\007\102\010\066\017\065\031" +
    "\075\050\074\070\111\071\106\077\105\100\110\101\101" +
    "\001\002\000\034\004\071\005\107\006\072\007\102\010" +
    "\066\017\065\031\075\050\074\070\111\071\106\077\105" +
    "\100\110\101\101\001\002\000\034\004\071\005\107\006" +
    "\072\007\102\010\066\017\065\031\075\050\074\070\111" +
    "\071\106\077\105\100\110\101\101\001\002\000\034\004" +
    "\071\005\107\006\072\007\102\010\066\017\065\031\075" +
    "\050\074\070\111\071\106\077\105\100\110\101\101\001" +
    "\002\000\034\004\071\005\107\006\072\007\102\010\066" +
    "\017\065\031\075\050\074\070\111\071\106\077\105\100" +
    "\110\101\101\001\002\000\034\004\071\005\107\006\072" +
    "\007\102\010\066\017\065\031\075\050\074\070\111\071" +
    "\106\077\105\100\110\101\101\001\002\000\054\013\uffc0" +
    "\015\uffc0\016\123\017\115\021\120\022\125\023\116\024" +
    "\127\025\uffc0\030\uffc0\032\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\051" +
    "\uffc0\001\002\000\054\013\uffb9\015\uffb9\016\123\017\115" +
    "\021\120\022\125\023\116\024\127\025\uffb9\030\uffb9\032" +
    "\uffb9\037\131\040\126\041\117\042\121\043\124\044\122" +
    "\045\uffb9\046\113\047\114\051\uffb9\001\002\000\054\013" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1\023\116" +
    "\024\uffc1\025\uffc1\030\uffc1\032\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\051\uffc1\001\002\000\054\013\uffbf\015\uffbf\016\123\017" +
    "\115\021\120\022\125\023\116\024\127\025\uffbf\030\uffbf" +
    "\032\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\051\uffbf\001\002\000\054" +
    "\013\uffc3\015\uffc3\016\uffc3\017\uffc3\021\uffc3\022\uffc3\023" +
    "\116\024\uffc3\025\uffc3\030\uffc3\032\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\051\uffc3\001\002\000\054\013\uffbc\015\uffbc\016\123" +
    "\017\115\021\120\022\125\023\116\024\127\025\uffbc\030" +
    "\uffbc\032\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc\001\002\000" +
    "\054\013\uffc6\015\uffc6\016\uffc6\017\uffc6\021\120\022\125" +
    "\023\116\024\127\025\uffc6\030\uffc6\032\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\051\uffc6\001\002\000\054\013\uffbb\015\uffbb\016" +
    "\123\017\115\021\120\022\125\023\116\024\127\025\uffbb" +
    "\030\uffbb\032\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\001\002" +
    "\000\054\013\uffbd\015\uffbd\016\123\017\115\021\120\022" +
    "\125\023\116\024\127\025\uffbd\030\uffbd\032\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\051\uffbd\001\002\000\054\013\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\021\uffc4\022\uffc4\023\116\024\uffc4\025" +
    "\uffc4\030\uffc4\032\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\051\uffc4\001" +
    "\002\000\054\013\uffbe\015\uffbe\016\123\017\115\021\120" +
    "\022\125\023\116\024\127\025\uffbe\030\uffbe\032\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\051\uffbe\001\002\000\052\013\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2\024\uffc2\025\uffc2" +
    "\030\uffc2\032\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\001\002" +
    "\000\054\013\uffc5\015\uffc5\016\uffc5\017\uffc5\021\120\022" +
    "\125\023\116\024\127\025\uffc5\030\uffc5\032\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\051\uffc5\001\002\000\054\013\uffb8\015\uffb8" +
    "\016\123\017\115\021\120\022\125\023\116\024\127\025" +
    "\uffb8\030\uffb8\032\uffb8\037\131\040\126\041\117\042\121" +
    "\043\124\044\122\045\uffb8\046\uffb8\047\uffb8\051\uffb8\001" +
    "\002\000\054\013\uffba\015\uffba\016\123\017\115\021\120" +
    "\022\125\023\116\024\127\025\uffba\030\uffba\032\uffba\037" +
    "\131\040\126\041\117\042\121\043\124\044\122\045\uffba" +
    "\046\uffba\047\114\051\uffba\001\002\000\034\004\071\005" +
    "\107\006\072\007\102\010\066\017\065\031\075\050\074" +
    "\070\111\071\106\077\105\100\110\101\101\001\002\000" +
    "\042\016\123\017\115\021\120\022\125\023\116\024\127" +
    "\032\153\037\131\040\126\041\117\042\121\043\124\044" +
    "\122\045\130\046\113\047\114\001\002\000\054\013\uff97" +
    "\015\uff97\016\uff97\017\uff97\021\uff97\022\uff97\023\uff97\024" +
    "\uff97\025\uff97\030\uff97\032\uff97\037\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\051" +
    "\uff97\001\002\000\034\004\071\005\107\006\072\007\102" +
    "\010\066\017\065\031\075\050\074\070\111\071\106\077" +
    "\105\100\110\101\101\001\002\000\042\016\123\017\115" +
    "\021\120\022\125\023\116\024\127\032\156\037\131\040" +
    "\126\041\117\042\121\043\124\044\122\045\130\046\113" +
    "\047\114\001\002\000\054\013\uff98\015\uff98\016\uff98\017" +
    "\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\030\uff98" +
    "\032\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044" +
    "\uff98\045\uff98\046\uff98\047\uff98\051\uff98\001\002\000\034" +
    "\004\071\005\107\006\072\007\102\010\066\017\065\031" +
    "\075\050\074\070\111\071\106\077\105\100\110\101\101" +
    "\001\002\000\004\013\161\001\002\000\056\002\uff90\003" +
    "\uff90\007\uff90\011\uff90\012\uff90\014\uff90\026\uff90\053\uff90" +
    "\054\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062" +
    "\uff90\064\uff90\065\uff90\066\uff90\067\uff90\074\uff90\104\uff90" +
    "\105\uff90\001\002\000\044\015\uff8c\016\123\017\115\021" +
    "\120\022\125\023\116\024\127\032\uff8c\037\131\040\126" +
    "\041\117\042\121\043\124\044\122\045\130\046\113\047" +
    "\114\001\002\000\034\004\071\005\107\006\072\007\102" +
    "\010\066\017\065\031\075\050\074\070\111\071\106\077" +
    "\105\100\110\101\101\001\002\000\004\102\165\001\002" +
    "\000\004\031\166\001\002\000\034\004\071\005\107\006" +
    "\072\007\102\010\066\017\065\031\075\050\074\070\111" +
    "\071\106\077\105\100\110\101\101\001\002\000\042\016" +
    "\123\017\115\021\120\022\125\023\116\024\127\032\170" +
    "\037\131\040\126\041\117\042\121\043\124\044\122\045" +
    "\130\046\113\047\114\001\002\000\054\013\uff95\015\uff95" +
    "\016\uff95\017\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025" +
    "\uff95\030\uff95\032\uff95\037\uff95\040\uff95\041\uff95\042\uff95" +
    "\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\051\uff95\001" +
    "\002\000\042\016\123\017\115\021\120\022\125\023\116" +
    "\024\127\030\172\037\131\040\126\041\117\042\121\043" +
    "\124\044\122\045\130\046\113\047\114\001\002\000\056" +
    "\013\uff99\015\uff99\016\uff99\017\uff99\021\uff99\022\uff99\023" +
    "\uff99\024\uff99\025\uff99\027\173\030\uff99\032\uff99\037\uff99" +
    "\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046" +
    "\uff99\047\uff99\051\uff99\001\002\000\034\004\071\005\107" +
    "\006\072\007\102\010\066\017\065\031\075\050\074\070" +
    "\111\071\106\077\105\100\110\101\101\001\002\000\042" +
    "\016\123\017\115\021\120\022\125\023\116\024\127\030" +
    "\175\037\131\040\126\041\117\042\121\043\124\044\122" +
    "\045\130\046\113\047\114\001\002\000\054\013\uffa0\015" +
    "\uffa0\016\uffa0\017\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\030\uffa0\032\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\051\uffa0" +
    "\001\002\000\034\004\071\005\107\006\072\007\102\010" +
    "\066\017\065\031\075\050\074\070\111\071\106\077\105" +
    "\100\110\101\101\001\002\000\042\016\123\017\115\021" +
    "\120\022\125\023\116\024\127\032\200\037\131\040\126" +
    "\041\117\042\121\043\124\044\122\045\130\046\113\047" +
    "\114\001\002\000\054\013\uff96\015\uff96\016\uff96\017\uff96" +
    "\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\030\uff96\032" +
    "\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96" +
    "\045\uff96\046\uff96\047\uff96\051\uff96\001\002\000\056\002" +
    "\uff8f\003\uff8f\007\uff8f\011\uff8f\012\uff8f\014\uff8f\026\uff8f" +
    "\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061" +
    "\uff8f\062\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\074\uff8f" +
    "\104\uff8f\105\uff8f\001\002\000\004\032\205\001\002\000" +
    "\042\016\123\017\115\021\120\022\125\023\116\024\127" +
    "\032\204\037\131\040\126\041\117\042\121\043\124\044" +
    "\122\045\130\046\113\047\114\001\002\000\054\013\uffae" +
    "\015\uffae\016\uffae\017\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\030\uffae\032\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\051" +
    "\uffae\001\002\000\034\004\071\005\107\006\072\007\102" +
    "\010\066\017\065\031\075\050\074\070\111\071\106\077" +
    "\105\100\110\101\101\001\002\000\054\013\uffaf\015\uffaf" +
    "\016\123\017\115\021\120\022\125\023\116\024\127\025" +
    "\uffaf\030\uffaf\032\uffaf\037\131\040\126\041\117\042\121" +
    "\043\124\044\122\045\130\046\113\047\114\051\uffaf\001" +
    "\002\000\054\013\uffb7\015\uffb7\016\123\017\115\021\120" +
    "\022\125\023\116\024\127\025\uffb7\030\uffb7\032\uffb7\037" +
    "\131\040\126\041\117\042\121\043\124\044\122\045\uffb7" +
    "\046\uffb7\047\uffb7\051\uffb7\001\002\000\054\013\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\030\uffc7\032\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\051\uffc7" +
    "\001\002\000\034\004\071\005\107\006\072\007\102\010" +
    "\066\017\065\031\075\050\074\070\111\071\106\077\105" +
    "\100\110\101\101\001\002\000\042\016\123\017\115\021" +
    "\120\022\125\023\116\024\127\032\213\037\131\040\126" +
    "\041\117\042\121\043\124\044\122\045\130\046\113\047" +
    "\114\001\002\000\004\013\214\001\002\000\056\002\uffe0" +
    "\003\uffe0\007\uffe0\011\uffe0\012\uffe0\014\uffe0\026\uffe0\053" +
    "\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0" +
    "\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\074\uffe0\104" +
    "\uffe0\105\uffe0\001\002\000\052\003\033\007\031\011\037" +
    "\012\012\014\061\053\057\054\014\055\025\056\024\057" +
    "\007\060\005\061\006\062\030\064\021\065\046\066\016" +
    "\067\060\074\047\104\040\105\062\001\002\000\054\003" +
    "\033\007\031\011\037\012\012\014\061\026\220\053\057" +
    "\054\014\055\025\056\024\057\007\060\005\061\006\062" +
    "\030\064\021\065\046\066\016\067\060\074\047\104\040" +
    "\105\062\001\002\000\056\002\uffff\003\uffff\007\uffff\011" +
    "\uffff\012\uffff\014\uffff\026\uffff\053\uffff\054\uffff\055\uffff" +
    "\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\064\uffff\065" +
    "\uffff\066\uffff\067\uffff\074\uffff\104\uffff\105\uffff\001\002" +
    "\000\004\065\221\001\002\000\004\031\222\001\002\000" +
    "\034\004\071\005\107\006\072\007\102\010\066\017\065" +
    "\031\075\050\074\070\111\071\106\077\105\100\110\101" +
    "\101\001\002\000\042\016\123\017\115\021\120\022\125" +
    "\023\116\024\127\032\224\037\131\040\126\041\117\042" +
    "\121\043\124\044\122\045\130\046\113\047\114\001\002" +
    "\000\004\013\225\001\002\000\056\002\uffd5\003\uffd5\007" +
    "\uffd5\011\uffd5\012\uffd5\014\uffd5\026\uffd5\053\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\064" +
    "\uffd5\065\uffd5\066\uffd5\067\uffd5\074\uffd5\104\uffd5\105\uffd5" +
    "\001\002\000\004\033\227\001\002\000\016\054\014\055" +
    "\025\056\024\057\007\060\005\104\040\001\002\000\010" +
    "\013\233\027\231\036\232\001\002\000\004\030\236\001" +
    "\002\000\034\004\071\005\107\006\072\007\102\010\066" +
    "\017\065\031\075\050\074\070\111\071\106\077\105\100" +
    "\110\101\101\001\002\000\056\002\uffdf\003\uffdf\007\uffdf" +
    "\011\uffdf\012\uffdf\014\uffdf\026\uffdf\053\uffdf\054\uffdf\055" +
    "\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\067\uffdf\074\uffdf\104\uffdf\105\uffdf\001" +
    "\002\000\042\013\235\016\123\017\115\021\120\022\125" +
    "\023\116\024\127\037\131\040\126\041\117\042\121\043" +
    "\124\044\122\045\130\046\113\047\114\001\002\000\056" +
    "\002\uffde\003\uffde\007\uffde\011\uffde\012\uffde\014\uffde\026" +
    "\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde" +
    "\061\uffde\062\uffde\064\uffde\065\uffde\066\uffde\067\uffde\074" +
    "\uffde\104\uffde\105\uffde\001\002\000\006\027\237\036\240" +
    "\001\002\000\004\030\250\001\002\000\004\027\241\001" +
    "\002\000\034\004\071\005\107\006\072\007\102\010\066" +
    "\017\065\031\075\050\074\070\111\071\106\077\105\100" +
    "\110\101\101\001\002\000\006\015\244\030\245\001\002" +
    "\000\044\015\uffa4\016\123\017\115\021\120\022\125\023" +
    "\116\024\127\030\uffa4\037\131\040\126\041\117\042\121" +
    "\043\124\044\122\045\130\046\113\047\114\001\002\000" +
    "\034\004\071\005\107\006\072\007\102\010\066\017\065" +
    "\031\075\050\074\070\111\071\106\077\105\100\110\101" +
    "\101\001\002\000\004\013\246\001\002\000\056\002\uffa7" +
    "\003\uffa7\007\uffa7\011\uffa7\012\uffa7\014\uffa7\026\uffa7\053" +
    "\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\062\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\074\uffa7\104" +
    "\uffa7\105\uffa7\001\002\000\044\015\uffa5\016\123\017\115" +
    "\021\120\022\125\023\116\024\127\030\uffa5\037\131\040" +
    "\126\041\117\042\121\043\124\044\122\045\130\046\113" +
    "\047\114\001\002\000\004\036\251\001\002\000\004\027" +
    "\252\001\002\000\004\027\253\001\002\000\034\004\071" +
    "\005\107\006\072\007\102\010\066\017\065\031\075\050" +
    "\074\070\111\071\106\077\105\100\110\101\101\001\002" +
    "\000\006\015\255\030\256\001\002\000\004\027\260\001" +
    "\002\000\004\013\257\001\002\000\056\002\uffa3\003\uffa3" +
    "\007\uffa3\011\uffa3\012\uffa3\014\uffa3\026\uffa3\053\uffa3\054" +
    "\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3" +
    "\064\uffa3\065\uffa3\066\uffa3\067\uffa3\074\uffa3\104\uffa3\105" +
    "\uffa3\001\002\000\034\004\071\005\107\006\072\007\102" +
    "\010\066\017\065\031\075\050\074\070\111\071\106\077" +
    "\105\100\110\101\101\001\002\000\006\015\244\030\262" +
    "\001\002\000\006\015\uff9f\030\uff9f\001\002\000\006\015" +
    "\244\030\264\001\002\000\006\015\uff9e\030\uff9e\001\002" +
    "\000\004\002\001\001\002\000\016\054\014\055\025\056" +
    "\024\057\007\060\005\104\040\001\002\000\004\043\270" +
    "\001\002\000\004\007\271\001\002\000\004\036\272\001" +
    "\002\000\004\076\273\001\002\000\004\074\274\001\002" +
    "\000\004\031\275\001\002\000\004\032\276\001\002\000" +
    "\004\013\277\001\002\000\056\002\uff9d\003\uff9d\007\uff9d" +
    "\011\uff9d\012\uff9d\014\uff9d\026\uff9d\053\uff9d\054\uff9d\055" +
    "\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\064\uff9d" +
    "\065\uff9d\066\uff9d\067\uff9d\074\uff9d\104\uff9d\105\uff9d\001" +
    "\002\000\034\004\071\005\107\006\072\007\102\010\066" +
    "\017\065\031\075\050\074\070\111\071\106\077\105\100" +
    "\110\101\101\001\002\000\042\016\123\017\115\021\120" +
    "\022\125\023\116\024\127\032\302\037\131\040\126\041" +
    "\117\042\121\043\124\044\122\045\130\046\113\047\114" +
    "\001\002\000\004\025\303\001\002\000\052\003\033\007" +
    "\031\011\037\012\012\014\061\053\057\054\014\055\025" +
    "\056\024\057\007\060\005\061\006\062\030\064\021\065" +
    "\046\066\016\067\060\074\047\104\040\105\062\001\002" +
    "\000\054\003\033\007\031\011\037\012\012\014\061\026" +
    "\305\053\057\054\014\055\025\056\024\057\007\060\005" +
    "\061\006\062\030\064\021\065\046\066\016\067\060\074" +
    "\047\104\040\105\062\001\002\000\056\002\uffd6\003\uffd6" +
    "\007\uffd6\011\uffd6\012\uffd6\014\uffd6\026\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\064\uffd6\065\uffd6\066\uffd6\067\uffd6\074\uffd6\104\uffd6\105" +
    "\uffd6\001\002\000\056\002\uffcf\003\uffcf\007\uffcf\011\uffcf" +
    "\012\uffcf\014\uffcf\026\uffcf\053\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\064\uffcf\065\uffcf" +
    "\066\uffcf\067\uffcf\074\uffcf\104\uffcf\105\uffcf\001\002\000" +
    "\056\002\ufff4\003\ufff4\007\ufff4\011\ufff4\012\ufff4\014\ufff4" +
    "\026\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060" +
    "\ufff4\061\ufff4\062\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4" +
    "\074\ufff4\104\ufff4\105\ufff4\001\002\000\056\002\uffe6\003" +
    "\uffe6\007\uffe6\011\uffe6\012\uffe6\014\uffe6\026\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\074\uffe6\104\uffe6" +
    "\105\uffe6\001\002\000\034\004\071\005\107\006\072\007" +
    "\102\010\066\017\065\031\075\050\074\070\111\071\106" +
    "\077\105\100\110\101\101\001\002\000\006\073\326\075" +
    "\327\001\002\000\036\004\071\005\107\006\072\007\102" +
    "\010\066\017\065\031\075\032\321\050\074\070\111\071" +
    "\106\077\105\100\110\101\101\001\002\000\034\004\071" +
    "\005\107\006\072\007\102\010\066\017\065\031\075\050" +
    "\074\070\111\071\106\077\105\100\110\101\101\001\002" +
    "\000\006\013\uffd3\032\uffd3\001\002\000\006\013\uffd4\032" +
    "\uffd4\001\002\000\042\013\320\016\123\017\115\021\120" +
    "\022\125\023\116\024\127\037\131\040\126\041\117\042" +
    "\121\043\124\044\122\045\130\046\113\047\114\001\002" +
    "\000\106\002\uffda\003\uffda\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\014\uffda\017\uffda\026\uffda" +
    "\031\uffda\050\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057" +
    "\uffda\060\uffda\061\uffda\062\uffda\064\uffda\065\uffda\066\uffda" +
    "\067\uffda\070\uffda\071\uffda\074\uffda\077\uffda\100\uffda\101" +
    "\uffda\104\uffda\105\uffda\001\002\000\004\013\325\001\002" +
    "\000\006\015\157\032\323\001\002\000\004\013\324\001" +
    "\002\000\056\002\uff8e\003\uff8e\007\uff8e\011\uff8e\012\uff8e" +
    "\014\uff8e\026\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057" +
    "\uff8e\060\uff8e\061\uff8e\062\uff8e\064\uff8e\065\uff8e\066\uff8e" +
    "\067\uff8e\074\uff8e\104\uff8e\105\uff8e\001\002\000\056\002" +
    "\uff8d\003\uff8d\007\uff8d\011\uff8d\012\uff8d\014\uff8d\026\uff8d" +
    "\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061" +
    "\uff8d\062\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\074\uff8d" +
    "\104\uff8d\105\uff8d\001\002\000\004\031\334\001\002\000" +
    "\004\031\330\001\002\000\034\004\071\005\107\006\072" +
    "\007\102\010\066\017\065\031\075\050\074\070\111\071" +
    "\106\077\105\100\110\101\101\001\002\000\042\016\123" +
    "\017\115\021\120\022\125\023\116\024\127\032\332\037" +
    "\131\040\126\041\117\042\121\043\124\044\122\045\130" +
    "\046\113\047\114\001\002\000\004\013\333\001\002\000" +
    "\056\002\uff9b\003\uff9b\007\uff9b\011\uff9b\012\uff9b\014\uff9b" +
    "\026\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060" +
    "\uff9b\061\uff9b\062\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b" +
    "\074\uff9b\104\uff9b\105\uff9b\001\002\000\034\004\071\005" +
    "\107\006\072\007\102\010\066\017\065\031\075\050\074" +
    "\070\111\071\106\077\105\100\110\101\101\001\002\000" +
    "\042\016\123\017\115\021\120\022\125\023\116\024\127" +
    "\032\336\037\131\040\126\041\117\042\121\043\124\044" +
    "\122\045\130\046\113\047\114\001\002\000\004\013\337" +
    "\001\002\000\056\002\uff9c\003\uff9c\007\uff9c\011\uff9c\012" +
    "\uff9c\014\uff9c\026\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c" +
    "\057\uff9c\060\uff9c\061\uff9c\062\uff9c\064\uff9c\065\uff9c\066" +
    "\uff9c\067\uff9c\074\uff9c\104\uff9c\105\uff9c\001\002\000\042" +
    "\016\123\017\115\021\120\022\125\023\116\024\127\030" +
    "\341\037\131\040\126\041\117\042\121\043\124\044\122" +
    "\045\130\046\113\047\114\001\002\000\062\002\uff99\003" +
    "\uff99\007\uff99\011\uff99\012\uff99\014\uff99\026\uff99\027\342" +
    "\036\343\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060" +
    "\uff99\061\uff99\062\uff99\064\uff99\065\uff99\066\uff99\067\uff99" +
    "\074\uff99\104\uff99\105\uff99\001\002\000\034\004\071\005" +
    "\107\006\072\007\102\010\066\017\065\031\075\050\074" +
    "\070\111\071\106\077\105\100\110\101\101\001\002\000" +
    "\034\004\071\005\107\006\072\007\102\010\066\017\065" +
    "\031\075\050\074\070\111\071\106\077\105\100\110\101" +
    "\101\001\002\000\042\013\345\016\123\017\115\021\120" +
    "\022\125\023\116\024\127\037\131\040\126\041\117\042" +
    "\121\043\124\044\122\045\130\046\113\047\114\001\002" +
    "\000\056\002\uff9a\003\uff9a\007\uff9a\011\uff9a\012\uff9a\014" +
    "\uff9a\026\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a" +
    "\060\uff9a\061\uff9a\062\uff9a\064\uff9a\065\uff9a\066\uff9a\067" +
    "\uff9a\074\uff9a\104\uff9a\105\uff9a\001\002\000\042\016\123" +
    "\017\115\021\120\022\125\023\116\024\127\030\347\037" +
    "\131\040\126\041\117\042\121\043\124\044\122\045\130" +
    "\046\113\047\114\001\002\000\004\036\350\001\002\000" +
    "\034\004\071\005\107\006\072\007\102\010\066\017\065" +
    "\031\075\050\074\070\111\071\106\077\105\100\110\101" +
    "\101\001\002\000\042\013\352\016\123\017\115\021\120" +
    "\022\125\023\116\024\127\037\131\040\126\041\117\042" +
    "\121\043\124\044\122\045\130\046\113\047\114\001\002" +
    "\000\056\002\uffa1\003\uffa1\007\uffa1\011\uffa1\012\uffa1\014" +
    "\uffa1\026\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\060\uffa1\061\uffa1\062\uffa1\064\uffa1\065\uffa1\066\uffa1\067" +
    "\uffa1\074\uffa1\104\uffa1\105\uffa1\001\002\000\034\004\071" +
    "\005\107\006\072\007\102\010\066\017\065\031\075\050" +
    "\074\070\111\071\106\077\105\100\110\101\101\001\002" +
    "\000\042\016\123\017\115\021\120\022\125\023\116\024" +
    "\127\032\355\037\131\040\126\041\117\042\121\043\124" +
    "\044\122\045\130\046\113\047\114\001\002\000\004\025" +
    "\356\001\002\000\052\003\033\007\031\011\037\012\012" +
    "\014\061\053\057\054\014\055\025\056\024\057\007\060" +
    "\005\061\006\062\030\064\021\065\046\066\016\067\060" +
    "\074\047\104\040\105\062\001\002\000\054\003\033\007" +
    "\031\011\037\012\012\014\061\026\360\053\057\054\014" +
    "\055\025\056\024\057\007\060\005\061\006\062\030\064" +
    "\021\065\046\066\016\067\060\074\047\104\040\105\062" +
    "\001\002\000\060\002\uffd9\003\uffd9\007\uffd9\011\uffd9\012" +
    "\uffd9\014\uffd9\026\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\361\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\074\uffd9\104\uffd9\105\uffd9\001\002" +
    "\000\006\025\362\062\030\001\002\000\052\003\033\007" +
    "\031\011\037\012\012\014\061\053\057\054\014\055\025" +
    "\056\024\057\007\060\005\061\006\062\030\064\021\065" +
    "\046\066\016\067\060\074\047\104\040\105\062\001\002" +
    "\000\056\002\uffd7\003\uffd7\007\uffd7\011\uffd7\012\uffd7\014" +
    "\uffd7\026\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7" +
    "\060\uffd7\061\uffd7\062\uffd7\064\uffd7\065\uffd7\066\uffd7\067" +
    "\uffd7\074\uffd7\104\uffd7\105\uffd7\001\002\000\054\003\033" +
    "\007\031\011\037\012\012\014\061\026\365\053\057\054" +
    "\014\055\025\056\024\057\007\060\005\061\006\062\030" +
    "\064\021\065\046\066\016\067\060\074\047\104\040\105" +
    "\062\001\002\000\056\002\uffd8\003\uffd8\007\uffd8\011\uffd8" +
    "\012\uffd8\014\uffd8\026\uffd8\053\uffd8\054\uffd8\055\uffd8\056" +
    "\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\064\uffd8\065\uffd8" +
    "\066\uffd8\067\uffd8\074\uffd8\104\uffd8\105\uffd8\001\002\000" +
    "\056\002\ufff5\003\ufff5\007\ufff5\011\ufff5\012\ufff5\014\ufff5" +
    "\026\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5" +
    "\074\ufff5\104\ufff5\105\ufff5\001\002\000\042\016\123\017" +
    "\115\021\120\022\125\023\116\024\127\025\370\037\131" +
    "\040\126\041\117\042\121\043\124\044\122\045\130\046" +
    "\113\047\114\001\002\000\036\004\071\005\107\006\072" +
    "\007\102\010\066\017\065\031\075\050\074\052\372\070" +
    "\111\071\106\077\105\100\110\101\101\001\002\000\040" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\017\uffe3\026" +
    "\uffe3\031\uffe3\050\uffe3\052\uffe3\070\uffe3\071\uffe3\077\uffe3" +
    "\100\uffe3\101\uffe3\001\002\000\004\051\u0103\001\002\000" +
    "\042\016\123\017\115\021\120\022\125\023\116\024\127" +
    "\037\131\040\126\041\117\042\121\043\124\044\122\045" +
    "\130\046\113\047\114\051\377\001\002\000\040\004\071" +
    "\005\107\006\072\007\102\010\066\017\065\026\375\031" +
    "\075\050\074\052\372\070\111\071\106\077\105\100\110" +
    "\101\101\001\002\000\056\002\uffe5\003\uffe5\007\uffe5\011" +
    "\uffe5\012\uffe5\014\uffe5\026\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\064\uffe5\065" +
    "\uffe5\066\uffe5\067\uffe5\074\uffe5\104\uffe5\105\uffe5\001\002" +
    "\000\040\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\017" +
    "\uffe4\026\uffe4\031\uffe4\050\uffe4\052\uffe4\070\uffe4\071\uffe4" +
    "\077\uffe4\100\uffe4\101\uffe4\001\002\000\004\025\u0100\001" +
    "\002\000\052\003\033\007\031\011\037\012\012\014\061" +
    "\053\057\054\014\055\025\056\024\057\007\060\005\061" +
    "\006\062\030\064\021\065\046\066\016\067\060\074\047" +
    "\104\040\105\062\001\002\000\054\003\033\007\031\011" +
    "\037\012\012\014\061\026\u0102\053\057\054\014\055\025" +
    "\056\024\057\007\060\005\061\006\062\030\064\021\065" +
    "\046\066\016\067\060\074\047\104\040\105\062\001\002" +
    "\000\040\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\017" +
    "\uffe2\026\uffe2\031\uffe2\050\uffe2\052\uffe2\070\uffe2\071\uffe2" +
    "\077\uffe2\100\uffe2\101\uffe2\001\002\000\004\025\u0104\001" +
    "\002\000\052\003\033\007\031\011\037\012\012\014\061" +
    "\053\057\054\014\055\025\056\024\057\007\060\005\061" +
    "\006\062\030\064\021\065\046\066\016\067\060\074\047" +
    "\104\040\105\062\001\002\000\054\003\033\007\031\011" +
    "\037\012\012\014\061\026\u0106\053\057\054\014\055\025" +
    "\056\024\057\007\060\005\061\006\062\030\064\021\065" +
    "\046\066\016\067\060\074\047\104\040\105\062\001\002" +
    "\000\040\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\017" +
    "\uffe1\026\uffe1\031\uffe1\050\uffe1\052\uffe1\070\uffe1\071\uffe1" +
    "\077\uffe1\100\uffe1\101\uffe1\001\002\000\004\007\u0108\001" +
    "\002\000\004\036\314\001\002\000\034\004\071\005\107" +
    "\006\072\007\102\010\066\017\065\031\075\050\074\070" +
    "\111\071\106\077\105\100\110\101\101\001\002\000\042" +
    "\013\u010b\016\123\017\115\021\120\022\125\023\116\024" +
    "\127\037\131\040\126\041\117\042\121\043\124\044\122" +
    "\045\130\046\113\047\114\001\002\000\004\007\u010c\001" +
    "\002\000\010\034\316\035\315\036\u0114\001\002\000\004" +
    "\032\uffd0\001\002\000\004\032\u0110\001\002\000\004\032" +
    "\uffd1\001\002\000\004\025\u0111\001\002\000\052\003\033" +
    "\007\031\011\037\012\012\014\061\053\057\054\014\055" +
    "\025\056\024\057\007\060\005\061\006\062\030\064\021" +
    "\065\046\066\016\067\060\074\047\104\040\105\062\001" +
    "\002\000\054\003\033\007\031\011\037\012\012\014\061" +
    "\026\u0113\053\057\054\014\055\025\056\024\057\007\060" +
    "\005\061\006\062\030\064\021\065\046\066\016\067\060" +
    "\074\047\104\040\105\062\001\002\000\056\002\uffdb\003" +
    "\uffdb\007\uffdb\011\uffdb\012\uffdb\014\uffdb\026\uffdb\053\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062" +
    "\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\074\uffdb\104\uffdb" +
    "\105\uffdb\001\002\000\034\004\071\005\107\006\072\007" +
    "\102\010\066\017\065\031\075\050\074\070\111\071\106" +
    "\077\105\100\110\101\101\001\002\000\042\016\123\017" +
    "\115\021\120\022\125\023\116\024\127\032\uffd2\037\131" +
    "\040\126\041\117\042\121\043\124\044\122\045\130\046" +
    "\113\047\114\001\002\000\056\002\uffce\003\uffce\007\uffce" +
    "\011\uffce\012\uffce\014\uffce\026\uffce\053\uffce\054\uffce\055" +
    "\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\064\uffce" +
    "\065\uffce\066\uffce\067\uffce\074\uffce\104\uffce\105\uffce\001" +
    "\002\000\004\033\u0118\001\002\000\016\054\014\055\025" +
    "\056\024\057\007\060\005\104\040\001\002\000\010\013" +
    "\u011c\027\u011a\036\u011b\001\002\000\004\030\u011f\001\002" +
    "\000\034\004\071\005\107\006\072\007\102\010\066\017" +
    "\065\031\075\050\074\070\111\071\106\077\105\100\110" +
    "\101\101\001\002\000\056\002\uffdd\003\uffdd\007\uffdd\011" +
    "\uffdd\012\uffdd\014\uffdd\026\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\064\uffdd\065" +
    "\uffdd\066\uffdd\067\uffdd\074\uffdd\104\uffdd\105\uffdd\001\002" +
    "\000\042\013\u011e\016\123\017\115\021\120\022\125\023" +
    "\116\024\127\037\131\040\126\041\117\042\121\043\124" +
    "\044\122\045\130\046\113\047\114\001\002\000\056\002" +
    "\uffdc\003\uffdc\007\uffdc\011\uffdc\012\uffdc\014\uffdc\026\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\074\uffdc" +
    "\104\uffdc\105\uffdc\001\002\000\006\027\u0120\036\u0121\001" +
    "\002\000\004\030\u0126\001\002\000\004\027\u0122\001\002" +
    "\000\034\004\071\005\107\006\072\007\102\010\066\017" +
    "\065\031\075\050\074\070\111\071\106\077\105\100\110" +
    "\101\101\001\002\000\006\015\244\030\u0124\001\002\000" +
    "\004\013\u0125\001\002\000\056\002\uffa6\003\uffa6\007\uffa6" +
    "\011\uffa6\012\uffa6\014\uffa6\026\uffa6\053\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\064\uffa6" +
    "\065\uffa6\066\uffa6\067\uffa6\074\uffa6\104\uffa6\105\uffa6\001" +
    "\002\000\004\036\u0127\001\002\000\004\027\u0128\001\002" +
    "\000\004\027\253\001\002\000\006\015\255\030\u012a\001" +
    "\002\000\004\013\u012b\001\002\000\056\002\uffa2\003\uffa2" +
    "\007\uffa2\011\uffa2\012\uffa2\014\uffa2\026\uffa2\053\uffa2\054" +
    "\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2" +
    "\064\uffa2\065\uffa2\066\uffa2\067\uffa2\074\uffa2\104\uffa2\105" +
    "\uffa2\001\002\000\004\031\u012d\001\002\000\020\032\u012f" +
    "\054\014\055\025\056\024\057\007\060\005\104\040\001" +
    "\002\000\006\015\u0135\032\u0136\001\002\000\004\025\u0132" +
    "\001\002\000\004\007\u0131\001\002\000\006\015\uff91\032" +
    "\uff91\001\002\000\052\003\033\007\031\011\037\012\012" +
    "\014\061\053\057\054\014\055\025\056\024\057\007\060" +
    "\005\061\006\062\030\064\021\065\046\066\016\067\060" +
    "\074\047\104\040\105\062\001\002\000\054\003\033\007" +
    "\031\011\037\012\012\014\061\026\u0134\053\057\054\014" +
    "\055\025\056\024\057\007\060\005\061\006\062\030\064" +
    "\021\065\046\066\016\067\060\074\047\104\040\105\062" +
    "\001\002\000\056\002\uff93\003\uff93\007\uff93\011\uff93\012" +
    "\uff93\014\uff93\026\uff93\053\uff93\054\uff93\055\uff93\056\uff93" +
    "\057\uff93\060\uff93\061\uff93\062\uff93\064\uff93\065\uff93\066" +
    "\uff93\067\uff93\074\uff93\104\uff93\105\uff93\001\002\000\016" +
    "\054\014\055\025\056\024\057\007\060\005\104\040\001" +
    "\002\000\004\025\u0137\001\002\000\052\003\033\007\031" +
    "\011\037\012\012\014\061\053\057\054\014\055\025\056" +
    "\024\057\007\060\005\061\006\062\030\064\021\065\046" +
    "\066\016\067\060\074\047\104\040\105\062\001\002\000" +
    "\054\003\033\007\031\011\037\012\012\014\061\026\u0139" +
    "\053\057\054\014\055\025\056\024\057\007\060\005\061" +
    "\006\062\030\064\021\065\046\066\016\067\060\074\047" +
    "\104\040\105\062\001\002\000\056\002\uff94\003\uff94\007" +
    "\uff94\011\uff94\012\uff94\014\uff94\026\uff94\053\uff94\054\uff94" +
    "\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94\064" +
    "\uff94\065\uff94\066\uff94\067\uff94\074\uff94\104\uff94\105\uff94" +
    "\001\002\000\004\007\u013b\001\002\000\006\015\uff92\032" +
    "\uff92\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0139\000\070\002\054\003\016\004\014\005\050\006" +
    "\042\007\040\010\053\011\035\012\012\013\003\015\044" +
    "\017\025\020\033\021\041\022\017\023\007\026\021\027" +
    "\034\030\047\034\026\035\043\036\022\037\055\040\031" +
    "\045\010\047\051\051\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\004\216\005\050\006\042\007\040\010\053\011" +
    "\035\012\012\013\003\015\044\017\025\020\033\021\041" +
    "\022\017\023\007\026\021\027\034\030\047\034\026\035" +
    "\043\036\022\037\055\040\031\045\010\047\051\051\052" +
    "\001\001\000\002\001\001\000\020\014\366\031\103\037" +
    "\075\041\072\042\066\043\077\044\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\014\111\031\103\037\075\041" +
    "\072\042\066\043\077\044\067\050\102\001\001\000\020" +
    "\014\207\031\103\037\075\041\072\042\066\043\077\044" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\206\031\103\037\075\041\072\042\066" +
    "\043\077\044\067\001\001\000\022\013\201\014\202\031" +
    "\103\037\075\041\072\042\066\043\077\044\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\147\031\103\037\075\041\072\042\066\043" +
    "\077\044\067\001\001\000\020\014\146\031\103\037\075" +
    "\041\072\042\066\043\077\044\067\001\001\000\020\014" +
    "\145\031\103\037\075\041\072\042\066\043\077\044\067" +
    "\001\001\000\020\014\144\031\103\037\075\041\072\042" +
    "\066\043\077\044\067\001\001\000\020\014\143\031\103" +
    "\037\075\041\072\042\066\043\077\044\067\001\001\000" +
    "\020\014\142\031\103\037\075\041\072\042\066\043\077" +
    "\044\067\001\001\000\020\014\141\031\103\037\075\041" +
    "\072\042\066\043\077\044\067\001\001\000\020\014\140" +
    "\031\103\037\075\041\072\042\066\043\077\044\067\001" +
    "\001\000\020\014\137\031\103\037\075\041\072\042\066" +
    "\043\077\044\067\001\001\000\020\014\136\031\103\037" +
    "\075\041\072\042\066\043\077\044\067\001\001\000\020" +
    "\014\135\031\103\037\075\041\072\042\066\043\077\044" +
    "\067\001\001\000\020\014\134\031\103\037\075\041\072" +
    "\042\066\043\077\044\067\001\001\000\020\014\133\031" +
    "\103\037\075\041\072\042\066\043\077\044\067\001\001" +
    "\000\020\014\132\031\103\037\075\041\072\042\066\043" +
    "\077\044\067\001\001\000\020\014\131\031\103\037\075" +
    "\041\072\042\066\043\077\044\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\151\031\103\037\075" +
    "\041\072\042\066\043\077\044\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\154\031\103\037\075" +
    "\041\072\042\066\043\077\044\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\161\031\103\037\075" +
    "\041\072\042\066\043\077\044\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\014\170" +
    "\031\103\037\075\041\072\042\066\043\077\044\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\014\166" +
    "\031\103\037\075\041\072\042\066\043\077\044\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\014\173\031\103\037\075\041" +
    "\072\042\066\043\077\044\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\014\176\031\103\037\075\041" +
    "\072\042\066\043\077\044\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\014\205\031\103" +
    "\037\075\041\072\042\066\043\077\044\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\014\211\031\103\037\075\041\072\042\066\043\077\044" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\003\215\004\014\005\050\006\042\007" +
    "\040\010\053\011\035\012\012\013\003\015\044\017\025" +
    "\020\033\021\041\022\017\023\007\026\021\027\034\030" +
    "\047\034\026\035\043\036\022\037\055\040\031\045\010" +
    "\047\051\051\052\001\001\000\064\004\216\005\050\006" +
    "\042\007\040\010\053\011\035\012\012\013\003\015\044" +
    "\017\025\020\033\021\041\022\017\023\007\026\021\027" +
    "\034\030\047\034\026\035\043\036\022\037\055\040\031" +
    "\045\010\047\051\051\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\014\222\031\103" +
    "\037\075\041\072\042\066\043\077\044\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\014\233\031\103\037\075\041\072" +
    "\042\066\043\077\044\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\014\242\031\103\032" +
    "\241\037\075\041\072\042\066\043\077\044\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\014\246\031" +
    "\103\037\075\041\072\042\066\043\077\044\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\253\001\001" +
    "\000\022\014\242\031\103\032\262\037\075\041\072\042" +
    "\066\043\077\044\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\014" +
    "\242\031\103\032\260\037\075\041\072\042\066\043\077" +
    "\044\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\300\031\103\037\075\041\072\042\066" +
    "\043\077\044\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\003\303\004\014\005\050\006\042\007\040" +
    "\010\053\011\035\012\012\013\003\015\044\017\025\020" +
    "\033\021\041\022\017\023\007\026\021\027\034\030\047" +
    "\034\026\035\043\036\022\037\055\040\031\045\010\047" +
    "\051\051\052\001\001\000\064\004\216\005\050\006\042" +
    "\007\040\010\053\011\035\012\012\013\003\015\044\017" +
    "\025\020\033\021\041\022\017\023\007\026\021\027\034" +
    "\030\047\034\026\035\043\036\022\037\055\040\031\045" +
    "\010\047\051\051\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\337\031\103\037\075\041\072\042\066\043\077\044\067" +
    "\001\001\000\002\001\001\000\022\014\111\031\103\037" +
    "\075\041\072\042\066\043\077\044\067\050\321\001\001" +
    "\000\020\014\316\031\103\037\075\041\072\042\066\043" +
    "\077\044\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\330\031\103\037\075\041\072\042\066\043\077\044\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\334\031\103\037\075\041\072\042\066" +
    "\043\077\044\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\345\031\103\037\075\041\072\042\066\043" +
    "\077\044\067\001\001\000\020\014\343\031\103\037\075" +
    "\041\072\042\066\043\077\044\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\350\031\103\037\075\041\072\042\066\043" +
    "\077\044\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\353\031\103\037\075\041\072\042\066\043" +
    "\077\044\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\066\003\356\004\014\005\050\006\042\007\040\010" +
    "\053\011\035\012\012\013\003\015\044\017\025\020\033" +
    "\021\041\022\017\023\007\026\021\027\034\030\047\034" +
    "\026\035\043\036\022\037\055\040\031\045\010\047\051" +
    "\051\052\001\001\000\064\004\216\005\050\006\042\007" +
    "\040\010\053\011\035\012\012\013\003\015\044\017\025" +
    "\020\033\021\041\022\017\023\007\026\021\027\034\030" +
    "\047\034\026\035\043\036\022\037\055\040\031\045\010" +
    "\047\051\051\052\001\001\000\002\001\001\000\004\010" +
    "\362\001\001\000\066\003\363\004\014\005\050\006\042" +
    "\007\040\010\053\011\035\012\012\013\003\015\044\017" +
    "\025\020\033\021\041\022\017\023\007\026\021\027\034" +
    "\030\047\034\026\035\043\036\022\037\055\040\031\045" +
    "\010\047\051\051\052\001\001\000\002\001\001\000\064" +
    "\004\216\005\050\006\042\007\040\010\053\011\035\012" +
    "\012\013\003\015\044\017\025\020\033\021\041\022\017" +
    "\023\007\026\021\027\034\030\047\034\026\035\043\036" +
    "\022\037\055\040\031\045\010\047\051\051\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\014\372\024\370\025\373\031\103\037\075\041\072" +
    "\042\066\043\077\044\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\014\372\024\375" +
    "\031\103\037\075\041\072\042\066\043\077\044\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\066\003\u0100\004\014\005\050\006\042\007\040\010" +
    "\053\011\035\012\012\013\003\015\044\017\025\020\033" +
    "\021\041\022\017\023\007\026\021\027\034\030\047\034" +
    "\026\035\043\036\022\037\055\040\031\045\010\047\051" +
    "\051\052\001\001\000\064\004\216\005\050\006\042\007" +
    "\040\010\053\011\035\012\012\013\003\015\044\017\025" +
    "\020\033\021\041\022\017\023\007\026\021\027\034\030" +
    "\047\034\026\035\043\036\022\037\055\040\031\045\010" +
    "\047\051\051\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\003\u0104\004\014\005\050\006\042\007\040" +
    "\010\053\011\035\012\012\013\003\015\044\017\025\020" +
    "\033\021\041\022\017\023\007\026\021\027\034\030\047" +
    "\034\026\035\043\036\022\037\055\040\031\045\010\047" +
    "\051\051\052\001\001\000\064\004\216\005\050\006\042" +
    "\007\040\010\053\011\035\012\012\013\003\015\044\017" +
    "\025\020\033\021\041\022\017\023\007\026\021\027\034" +
    "\030\047\034\026\035\043\036\022\037\055\040\031\045" +
    "\010\047\051\051\052\001\001\000\002\001\001\000\004" +
    "\007\u0108\001\001\000\002\001\001\000\020\014\u0109\031" +
    "\103\037\075\041\072\042\066\043\077\044\067\001\001" +
    "\000\002\001\001\000\010\016\u010d\017\u010e\020\u010c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\003\u0111\004" +
    "\014\005\050\006\042\007\040\010\053\011\035\012\012" +
    "\013\003\015\044\017\025\020\033\021\041\022\017\023" +
    "\007\026\021\027\034\030\047\034\026\035\043\036\022" +
    "\037\055\040\031\045\010\047\051\051\052\001\001\000" +
    "\064\004\216\005\050\006\042\007\040\010\053\011\035" +
    "\012\012\013\003\015\044\017\025\020\033\021\041\022" +
    "\017\023\007\026\021\027\034\030\047\034\026\035\043" +
    "\036\022\037\055\040\031\045\010\047\051\051\052\001" +
    "\001\000\002\001\001\000\020\014\u0114\031\103\037\075" +
    "\041\072\042\066\043\077\044\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0118" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\u011c\031\103\037\075\041\072\042\066\043\077\044\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\014\242\031\103\032\u0122\037\075\041\072\042" +
    "\066\043\077\044\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\u0128\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\u012f\046\u012d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\003\u0132\004" +
    "\014\005\050\006\042\007\040\010\053\011\035\012\012" +
    "\013\003\015\044\017\025\020\033\021\041\022\017\023" +
    "\007\026\021\027\034\030\047\034\026\035\043\036\022" +
    "\037\055\040\031\045\010\047\051\051\052\001\001\000" +
    "\064\004\216\005\050\006\042\007\040\010\053\011\035" +
    "\012\012\013\003\015\044\017\025\020\033\021\041\022" +
    "\017\023\007\026\021\027\034\030\047\034\026\035\043" +
    "\036\022\037\055\040\031\045\010\047\051\051\052\001" +
    "\001\000\002\001\001\000\004\013\u0139\001\001\000\002" +
    "\001\001\000\066\003\u0137\004\014\005\050\006\042\007" +
    "\040\010\053\011\035\012\012\013\003\015\044\017\025" +
    "\020\033\021\041\022\017\023\007\026\021\027\034\030" +
    "\047\034\026\035\043\036\022\037\055\040\031\045\010" +
    "\047\051\051\052\001\001\000\064\004\216\005\050\006" +
    "\042\007\040\010\053\011\035\012\012\013\003\015\044" +
    "\017\025\020\033\021\041\022\017\023\007\026\021\027" +
    "\034\030\047\034\026\035\043\036\022\037\055\040\031" +
    "\045\010\047\051\051\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= INCREMENTO PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= DECREMENTO PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= BK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= CT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= DEC_VEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= DEC_VEC2D 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= ASIG_VEC2D 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= DECL_LISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= APPEND_LISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= REMOVE_LISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= ASIG 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= ACC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= EXECUTEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= error PTCOMA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SMATCH ::= MATCH EXPRESION LLAVIZQ LIST_CASES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LIST_CASES ::= LIST_CASES CASE_MATCH 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Case> a = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LIST_CASES ::= CASE_MATCH 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CASE_MATCH ::= EXPRESION FLECHA LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Case(a, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_MATCH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CASE_MATCH ::= DEFAULT FLECHA LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Case(null, a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_MATCH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IMPRESION ::= PRINT PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= VAR ID DOSPT TIPOS PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("var", b, null, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= VAR ID DOSPT TIPOS IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("var", b, c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= CONST ID DOSPT TIPOS PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("const", b, null, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= CONST ID DOSPT TIPOS IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("const", b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CFOR ::= FOR PARIZQ ASIGNACION EXPRESION PTCOMA ACTU PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= ID IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, null, null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER ELSE LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, c, null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(a, b, null, (If) c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SWHILE ::= WHILE PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWHILE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SDOWHILE ::= DO LLAVIZQ INSTRUCCIONES LLAVDER WHILE PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DoWhile(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SDOWHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INCREMENTO ::= ID INCRE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECREMENTO ::= ID DECRE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ACTU ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ACTU ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ACTU ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BK ::= BREAK PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BK",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CT ::= CONTINUE PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPOS ::= RDOUBLE 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.DECIMAL);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOS ::= RSTRING 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.VOID);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION IGUALA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION DIFER EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= EXPRESION MENORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION MAYORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVar(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= CARAC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a.charAt(1), new Tipo(tipoDato.CARACTER), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= RTRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= RFALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright );    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= PARIZQ TIPOS PARDER EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= ACC_VEC2D 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= ACC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= FUNC_ROUND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= FUNC_LENGTH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= FUNC_TOSTRING 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= FUNC_FIND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DEC_VEC ::= VAR ID DOSPT TIPOS CORIZQ CORDER IGUAL CORIZQ LISTAVALORES CORDER PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector("var", b, a, c, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC_VEC",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DEC_VEC ::= CONST ID DOSPT TIPOS CORIZQ CORDER IGUAL CORIZQ LISTAVALORES CORDER PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector("const", b, a, c, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC_VEC",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LISTAVALORES ::= LISTAVALORES COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LISTAVALORES ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); ((LinkedList<Instruccion>)RESULT).add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DEC_VEC2D ::= VAR ID DOSPT TIPOS CORIZQ CORDER CORIZQ CORDER IGUAL CORIZQ LISTAVALORES2D CORDER PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> c = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector2D(b, a, c, false, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC_VEC2D",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DEC_VEC2D ::= CONST ID DOSPT TIPOS CORIZQ CORDER CORIZQ CORDER IGUAL CORIZQ LISTAVALORES2D CORDER PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> c = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector2D(b, a, c, true, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC_VEC2D",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ASIG_VEC2D ::= ID CORIZQ EXPRESION CORDER CORIZQ EXPRESION CORDER IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVector2D(b, a, c, d, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_VEC2D",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ACC_VEC2D ::= ID CORIZQ EXPRESION CORDER CORIZQ EXPRESION CORDER 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector2D(b, a, c, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACC_VEC2D",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LISTAVALORES2D ::= LISTAVALORES2D COMA CORIZQ LISTAVALORES CORDER 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2D",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LISTAVALORES2D ::= CORIZQ LISTAVALORES CORDER 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<LinkedList<Instruccion>>(); ((LinkedList<LinkedList<Instruccion>>)RESULT).add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2D",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECL_LISTA ::= LIST MENOR TIPOS MAYOR ID IGUAL NEW LIST PARIZQ PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		   RESULT = new DeclaracionLista(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_LISTA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // APPEND_LISTA ::= ID PUNTO APP PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AppendLista(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("APPEND_LISTA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // REMOVE_LISTA ::= ID PUNTO REM PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RemoveLista(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVE_LISTA",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ASIG ::= ID CORIZQ EXPRESION CORDER IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Asignacion(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ACC ::= ID CORIZQ EXPRESION CORDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Acceso(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACC",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNC_ROUND ::= ROUND PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncionRound(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_ROUND",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNC_LENGTH ::= LEN PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncionLength(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_LENGTH",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNC_TOSTRING ::= TOSTR PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncionToString(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_TOSTRING",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNC_FIND ::= ID PUNTO FIND PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncionFind(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_FIND",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // METODO ::= TIPOS ID PARIZQ PARAMS PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // METODO ::= TIPOS ID PARIZQ PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAMS ::= PARAMS COMA TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMS ::= TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXECUTEE ::= SW ID PARIZQ PARAMSCALL PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Execute(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXECUTEE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXECUTEE ::= SW ID PARIZQ PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new Execute(a, new LinkedList<Instruccion>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXECUTEE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LLAMADA ::= ID PARIZQ PARAMSCALL PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT= new Llamada(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LLAMADA ::= ID PARIZQ PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
