
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.Casteo;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Match;
import instrucciones.Case;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVar;
import expresiones.Incremento;
import expresiones.Decremento;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\023\007\000\002\025\004" +
    "\000\002\025\003\000\002\024\007\000\002\024\007\000" +
    "\002\005\007\000\002\006\007\000\002\006\011\000\002" +
    "\006\007\000\002\006\011\000\002\015\014\000\002\007" +
    "\006\000\002\010\011\000\002\010\015\000\002\010\013" +
    "\000\002\011\011\000\002\012\013\000\002\017\004\000" +
    "\002\020\004\000\002\016\005\000\002\016\003\000\002" +
    "\016\003\000\002\021\004\000\002\022\004\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\004\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\004\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\005" +
    "\000\002\014\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\032\003\024\007\015\012\022\050\034\056" +
    "\023\057\014\061\033\062\007\063\030\064\016\067\020" +
    "\070\006\001\002\000\036\002\ufff2\003\ufff2\007\ufff2\012" +
    "\ufff2\023\ufff2\050\ufff2\056\ufff2\057\ufff2\061\ufff2\062\ufff2" +
    "\063\ufff2\064\ufff2\067\ufff2\070\ufff2\001\002\000\036\002" +
    "\ufffe\003\ufffe\007\ufffe\012\ufffe\023\ufffe\050\ufffe\056\ufffe" +
    "\057\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\067\ufffe\070" +
    "\ufffe\001\002\000\004\011\250\001\002\000\004\026\242" +
    "\001\002\000\036\002\ufff8\003\ufff8\007\ufff8\012\ufff8\023" +
    "\ufff8\050\ufff8\056\ufff8\057\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\064\ufff8\067\ufff8\070\ufff8\001\002\000\036\002\ufffc\003" +
    "\ufffc\007\ufffc\012\ufffc\023\ufffc\050\ufffc\056\ufffc\057\ufffc" +
    "\061\ufffc\062\ufffc\063\ufffc\064\ufffc\067\ufffc\070\ufffc\001" +
    "\002\000\036\002\ufffa\003\ufffa\007\ufffa\012\ufffa\023\ufffa" +
    "\050\ufffa\056\ufffa\057\ufffa\061\ufffa\062\ufffa\063\ufffa\064" +
    "\ufffa\067\ufffa\070\ufffa\001\002\000\034\002\000\003\024" +
    "\007\015\012\022\050\034\056\023\057\014\061\033\062" +
    "\007\063\030\064\016\067\020\070\006\001\002\000\004" +
    "\026\227\001\002\000\010\031\173\032\172\033\175\001" +
    "\002\000\004\022\217\001\002\000\036\002\ufffb\003\ufffb" +
    "\007\ufffb\012\ufffb\023\ufffb\050\ufffb\056\ufffb\057\ufffb\061" +
    "\ufffb\062\ufffb\063\ufffb\064\ufffb\067\ufffb\070\ufffb\001\002" +
    "\000\004\011\216\001\002\000\004\011\215\001\002\000" +
    "\004\026\211\001\002\000\004\007\202\001\002\000\004" +
    "\011\201\001\002\000\036\002\ufff6\003\ufff6\007\ufff6\012" +
    "\ufff6\023\ufff6\050\ufff6\056\ufff6\057\ufff6\061\ufff6\062\ufff6" +
    "\063\ufff6\064\ufff6\067\ufff6\070\ufff6\001\002\000\004\011" +
    "\200\001\002\000\036\002\ufff9\003\ufff9\007\ufff9\012\ufff9" +
    "\023\ufff9\050\ufff9\056\ufff9\057\ufff9\061\ufff9\062\ufff9\063" +
    "\ufff9\064\ufff9\067\ufff9\070\ufff9\001\002\000\004\026\154" +
    "\001\002\000\036\002\ufff3\003\ufff3\007\ufff3\012\ufff3\023" +
    "\ufff3\050\ufff3\056\ufff3\057\ufff3\061\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\067\ufff3\070\ufff3\001\002\000\036\002\ufffd\003" +
    "\ufffd\007\ufffd\012\ufffd\023\ufffd\050\ufffd\056\ufffd\057\ufffd" +
    "\061\ufffd\062\ufffd\063\ufffd\064\ufffd\067\ufffd\070\ufffd\001" +
    "\002\000\026\004\052\005\056\006\053\007\061\010\057" +
    "\014\054\026\060\045\063\065\055\066\062\001\002\000" +
    "\004\007\040\001\002\000\036\002\ufff7\003\ufff7\007\ufff7" +
    "\012\ufff7\023\ufff7\050\ufff7\056\ufff7\057\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\064\ufff7\067\ufff7\070\ufff7\001\002\000\004" +
    "\002\037\001\002\000\004\002\001\001\002\000\004\030" +
    "\041\001\002\000\014\051\047\052\042\053\045\054\046" +
    "\055\043\001\002\000\010\011\uffd7\027\uffd7\033\uffd7\001" +
    "\002\000\010\011\uffd4\027\uffd4\033\uffd4\001\002\000\006" +
    "\011\051\033\050\001\002\000\010\011\uffd6\027\uffd6\033" +
    "\uffd6\001\002\000\010\011\uffd5\027\uffd5\033\uffd5\001\002" +
    "\000\010\011\uffd8\027\uffd8\033\uffd8\001\002\000\026\004" +
    "\052\005\056\006\053\007\061\010\057\014\054\026\060" +
    "\045\063\065\055\066\062\001\002\000\036\002\uffea\003" +
    "\uffea\007\uffea\012\uffea\023\uffea\050\uffea\056\uffea\057\uffea" +
    "\061\uffea\062\uffea\063\uffea\064\uffea\067\uffea\070\uffea\001" +
    "\002\000\050\011\uffc0\013\uffc0\014\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\027\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\046\uffc0\001\002\000\050\011\uffc1\013\uffc1\014\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\027\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\046\uffc1\001\002\000\026\004\052\005\056" +
    "\006\053\007\061\010\057\014\054\026\060\045\063\065" +
    "\055\066\062\001\002\000\050\011\uffbd\013\uffbd\014\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\027\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd" +
    "\043\uffbd\044\uffbd\046\uffbd\001\002\000\050\011\uffc2\013" +
    "\uffc2\014\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\027\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\046\uffc2\001\002\000\050" +
    "\011\uffbe\013\uffbe\014\uffbe\016\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\027\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\001" +
    "\002\000\040\004\052\005\056\006\053\007\061\010\057" +
    "\014\054\026\060\045\063\051\047\052\042\053\045\054" +
    "\046\055\043\065\055\066\062\001\002\000\050\011\uffbf" +
    "\013\uffbf\014\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\027\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\046\uffbf\001\002\000" +
    "\050\011\uffbc\013\uffbc\014\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\027\uffbc\034\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc" +
    "\001\002\000\026\004\052\005\056\006\053\007\061\010" +
    "\057\014\054\026\060\045\063\065\055\066\062\001\002" +
    "\000\042\011\073\013\076\014\067\016\072\017\077\020" +
    "\070\021\101\034\104\035\102\036\071\037\074\040\100" +
    "\041\075\042\103\043\065\044\066\001\002\000\026\004" +
    "\052\005\056\006\053\007\061\010\057\014\054\026\060" +
    "\045\063\065\055\066\062\001\002\000\026\004\052\005" +
    "\056\006\053\007\061\010\057\014\054\026\060\045\063" +
    "\065\055\066\062\001\002\000\026\004\052\005\056\006" +
    "\053\007\061\010\057\014\054\026\060\045\063\065\055" +
    "\066\062\001\002\000\026\004\052\005\056\006\053\007" +
    "\061\010\057\014\054\026\060\045\063\065\055\066\062" +
    "\001\002\000\026\004\052\005\056\006\053\007\061\010" +
    "\057\014\054\026\060\045\063\065\055\066\062\001\002" +
    "\000\026\004\052\005\056\006\053\007\061\010\057\014" +
    "\054\026\060\045\063\065\055\066\062\001\002\000\036" +
    "\002\uffe9\003\uffe9\007\uffe9\012\uffe9\023\uffe9\050\uffe9\056" +
    "\uffe9\057\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\067\uffe9" +
    "\070\uffe9\001\002\000\026\004\052\005\056\006\053\007" +
    "\061\010\057\014\054\026\060\045\063\065\055\066\062" +
    "\001\002\000\026\004\052\005\056\006\053\007\061\010" +
    "\057\014\054\026\060\045\063\065\055\066\062\001\002" +
    "\000\026\004\052\005\056\006\053\007\061\010\057\014" +
    "\054\026\060\045\063\065\055\066\062\001\002\000\026" +
    "\004\052\005\056\006\053\007\061\010\057\014\054\026" +
    "\060\045\063\065\055\066\062\001\002\000\026\004\052" +
    "\005\056\006\053\007\061\010\057\014\054\026\060\045" +
    "\063\065\055\066\062\001\002\000\026\004\052\005\056" +
    "\006\053\007\061\010\057\014\054\026\060\045\063\065" +
    "\055\066\062\001\002\000\026\004\052\005\056\006\053" +
    "\007\061\010\057\014\054\026\060\045\063\065\055\066" +
    "\062\001\002\000\026\004\052\005\056\006\053\007\061" +
    "\010\057\014\054\026\060\045\063\065\055\066\062\001" +
    "\002\000\026\004\052\005\056\006\053\007\061\010\057" +
    "\014\054\026\060\045\063\065\055\066\062\001\002\000" +
    "\050\011\uffcc\013\076\014\067\016\072\017\077\020\070" +
    "\021\101\022\uffcc\027\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\046\uffcc" +
    "\001\002\000\050\011\uffc5\013\076\014\067\016\072\017" +
    "\077\020\070\021\101\022\uffc5\027\uffc5\034\104\035\102" +
    "\036\071\037\074\040\100\041\075\042\uffc5\043\065\044" +
    "\066\046\uffc5\001\002\000\050\011\uffcb\013\076\014\067" +
    "\016\072\017\077\020\070\021\101\022\uffcb\027\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\046\uffcb\001\002\000\050\011\uffcd\013" +
    "\uffcd\014\uffcd\016\uffcd\017\uffcd\020\070\021\uffcd\022\uffcd" +
    "\027\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\046\uffcd\001\002\000\050" +
    "\011\uffc8\013\076\014\067\016\072\017\077\020\070\021" +
    "\101\022\uffc8\027\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\046\uffc8\001" +
    "\002\000\050\011\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf" +
    "\020\070\021\uffcf\022\uffcf\027\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\046\uffcf\001\002\000\050\011\uffd2\013\uffd2\014\uffd2\016" +
    "\072\017\077\020\070\021\101\022\uffd2\027\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\046\uffd2\001\002\000\050\011\uffc7\013\076" +
    "\014\067\016\072\017\077\020\070\021\101\022\uffc7\027" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\046\uffc7\001\002\000\050\011" +
    "\uffc9\013\076\014\067\016\072\017\077\020\070\021\101" +
    "\022\uffc9\027\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\046\uffc9\001\002" +
    "\000\050\011\uffd0\013\uffd0\014\uffd0\016\uffd0\017\uffd0\020" +
    "\070\021\uffd0\022\uffd0\027\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\046" +
    "\uffd0\001\002\000\050\011\uffca\013\076\014\067\016\072" +
    "\017\077\020\070\021\101\022\uffca\027\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\046\uffca\001\002\000\046\011\uffce\013\uffce\014" +
    "\uffce\016\uffce\017\uffce\021\uffce\022\uffce\027\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\046\uffce\001\002\000\050\011\uffd1\013\uffd1" +
    "\014\uffd1\016\072\017\077\020\070\021\101\022\uffd1\027" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\046\uffd1\001\002\000\050\011" +
    "\uffc4\013\076\014\067\016\072\017\077\020\070\021\101" +
    "\022\uffc4\027\uffc4\034\104\035\102\036\071\037\074\040" +
    "\100\041\075\042\uffc4\043\uffc4\044\uffc4\046\uffc4\001\002" +
    "\000\050\011\uffc6\013\076\014\067\016\072\017\077\020" +
    "\070\021\101\022\uffc6\027\uffc6\034\104\035\102\036\071" +
    "\037\074\040\100\041\075\042\uffc6\043\uffc6\044\066\046" +
    "\uffc6\001\002\000\050\011\uffc3\013\076\014\067\016\072" +
    "\017\077\020\070\021\101\022\uffc3\027\uffc3\034\104\035" +
    "\102\036\071\037\074\040\100\041\075\042\uffc3\043\uffc3" +
    "\044\uffc3\046\uffc3\001\002\000\042\013\076\014\067\016" +
    "\072\017\077\020\070\021\101\027\131\034\104\035\102" +
    "\036\071\037\074\040\100\041\075\042\103\043\065\044" +
    "\066\001\002\000\004\027\127\001\002\000\026\004\052" +
    "\005\056\006\053\007\061\010\057\014\054\026\060\045" +
    "\063\065\055\066\062\001\002\000\050\011\uffba\013\076" +
    "\014\067\016\072\017\077\020\070\021\101\022\uffba\027" +
    "\uffba\034\104\035\102\036\071\037\074\040\100\041\075" +
    "\042\103\043\065\044\066\046\uffba\001\002\000\050\011" +
    "\uffbb\013\uffbb\014\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\022\uffbb\027\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\046\uffbb\001\002" +
    "\000\050\011\uffd3\013\uffd3\014\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\027\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\046" +
    "\uffd3\001\002\000\042\013\076\014\067\016\072\017\077" +
    "\020\070\021\101\022\134\034\104\035\102\036\071\037" +
    "\074\040\100\041\075\042\103\043\065\044\066\001\002" +
    "\000\030\004\052\005\056\006\053\007\061\010\057\014" +
    "\054\026\060\045\063\047\136\065\055\066\062\001\002" +
    "\000\032\004\052\005\056\006\053\007\061\010\057\014" +
    "\054\023\153\026\060\045\063\047\136\065\055\066\062" +
    "\001\002\000\004\046\146\001\002\000\032\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\014\uffee\023\uffee\026\uffee" +
    "\045\uffee\047\uffee\065\uffee\066\uffee\001\002\000\042\013" +
    "\076\014\067\016\072\017\077\020\070\021\101\034\104" +
    "\035\102\036\071\037\074\040\100\041\075\042\103\043" +
    "\065\044\066\046\141\001\002\000\004\022\142\001\002" +
    "\000\032\003\024\007\015\012\022\050\034\056\023\057" +
    "\014\061\033\062\007\063\030\064\016\067\020\070\006" +
    "\001\002\000\034\003\024\007\015\012\022\023\144\050" +
    "\034\056\023\057\014\061\033\062\007\063\030\064\016" +
    "\067\020\070\006\001\002\000\032\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\014\uffed\023\uffed\026\uffed\045\uffed" +
    "\047\uffed\065\uffed\066\uffed\001\002\000\036\002\uffff\003" +
    "\uffff\007\uffff\012\uffff\023\uffff\050\uffff\056\uffff\057\uffff" +
    "\061\uffff\062\uffff\063\uffff\064\uffff\067\uffff\070\uffff\001" +
    "\002\000\004\022\147\001\002\000\032\003\024\007\015" +
    "\012\022\050\034\056\023\057\014\061\033\062\007\063" +
    "\030\064\016\067\020\070\006\001\002\000\034\003\024" +
    "\007\015\012\022\023\151\050\034\056\023\057\014\061" +
    "\033\062\007\063\030\064\016\067\020\070\006\001\002" +
    "\000\032\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\014" +
    "\uffec\023\uffec\026\uffec\045\uffec\047\uffec\065\uffec\066\uffec" +
    "\001\002\000\032\004\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\014\uffef\023\uffef\026\uffef\045\uffef\047\uffef\065\uffef" +
    "\066\uffef\001\002\000\036\002\ufff0\003\ufff0\007\ufff0\012" +
    "\ufff0\023\ufff0\050\ufff0\056\ufff0\057\ufff0\061\ufff0\062\ufff0" +
    "\063\ufff0\064\ufff0\067\ufff0\070\ufff0\001\002\000\004\007" +
    "\155\001\002\000\004\033\175\001\002\000\026\004\052" +
    "\005\056\006\053\007\061\010\057\014\054\026\060\045" +
    "\063\065\055\066\062\001\002\000\042\011\160\013\076" +
    "\014\067\016\072\017\077\020\070\021\101\034\104\035" +
    "\102\036\071\037\074\040\100\041\075\042\103\043\065" +
    "\044\066\001\002\000\004\007\161\001\002\000\010\031" +
    "\173\032\172\033\171\001\002\000\004\027\uffdb\001\002" +
    "\000\004\027\165\001\002\000\004\027\uffdc\001\002\000" +
    "\004\022\166\001\002\000\032\003\024\007\015\012\022" +
    "\050\034\056\023\057\014\061\033\062\007\063\030\064" +
    "\016\067\020\070\006\001\002\000\034\003\024\007\015" +
    "\012\022\023\170\050\034\056\023\057\014\061\033\062" +
    "\007\063\030\064\016\067\020\070\006\001\002\000\036" +
    "\002\uffe6\003\uffe6\007\uffe6\012\uffe6\023\uffe6\050\uffe6\056" +
    "\uffe6\057\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\067\uffe6" +
    "\070\uffe6\001\002\000\026\004\052\005\056\006\053\007" +
    "\061\010\057\014\054\026\060\045\063\065\055\066\062" +
    "\001\002\000\006\011\uffde\027\uffde\001\002\000\006\011" +
    "\uffdf\027\uffdf\001\002\000\042\013\076\014\067\016\072" +
    "\017\077\020\070\021\101\027\uffdd\034\104\035\102\036" +
    "\071\037\074\040\100\041\075\042\103\043\065\044\066" +
    "\001\002\000\026\004\052\005\056\006\053\007\061\010" +
    "\057\014\054\026\060\045\063\065\055\066\062\001\002" +
    "\000\042\011\177\013\076\014\067\016\072\017\077\020" +
    "\070\021\101\034\104\035\102\036\071\037\074\040\100" +
    "\041\075\042\103\043\065\044\066\001\002\000\060\002" +
    "\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\012\uffe5\014\uffe5\023\uffe5\026\uffe5\045\uffe5\050\uffe5\056" +
    "\uffe5\057\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\067\uffe5\070\uffe5\001\002\000\036\002\ufff4\003" +
    "\ufff4\007\ufff4\012\ufff4\023\ufff4\050\ufff4\056\ufff4\057\ufff4" +
    "\061\ufff4\062\ufff4\063\ufff4\064\ufff4\067\ufff4\070\ufff4\001" +
    "\002\000\036\002\ufff1\003\ufff1\007\ufff1\012\ufff1\023\ufff1" +
    "\050\ufff1\056\ufff1\057\ufff1\061\ufff1\062\ufff1\063\ufff1\064" +
    "\ufff1\067\ufff1\070\ufff1\001\002\000\004\030\203\001\002" +
    "\000\014\051\047\052\042\053\045\054\046\055\043\001" +
    "\002\000\006\011\206\033\205\001\002\000\026\004\052" +
    "\005\056\006\053\007\061\010\057\014\054\026\060\045" +
    "\063\065\055\066\062\001\002\000\036\002\uffe8\003\uffe8" +
    "\007\uffe8\012\uffe8\023\uffe8\050\uffe8\056\uffe8\057\uffe8\061" +
    "\uffe8\062\uffe8\063\uffe8\064\uffe8\067\uffe8\070\uffe8\001\002" +
    "\000\042\011\210\013\076\014\067\016\072\017\077\020" +
    "\070\021\101\034\104\035\102\036\071\037\074\040\100" +
    "\041\075\042\103\043\065\044\066\001\002\000\036\002" +
    "\uffe7\003\uffe7\007\uffe7\012\uffe7\023\uffe7\050\uffe7\056\uffe7" +
    "\057\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\067\uffe7\070" +
    "\uffe7\001\002\000\026\004\052\005\056\006\053\007\061" +
    "\010\057\014\054\026\060\045\063\065\055\066\062\001" +
    "\002\000\042\013\076\014\067\016\072\017\077\020\070" +
    "\021\101\027\213\034\104\035\102\036\071\037\074\040" +
    "\100\041\075\042\103\043\065\044\066\001\002\000\004" +
    "\011\214\001\002\000\036\002\uffeb\003\uffeb\007\uffeb\012" +
    "\uffeb\023\uffeb\050\uffeb\056\uffeb\057\uffeb\061\uffeb\062\uffeb" +
    "\063\uffeb\064\uffeb\067\uffeb\070\uffeb\001\002\000\036\002" +
    "\ufff5\003\ufff5\007\ufff5\012\ufff5\023\ufff5\050\ufff5\056\ufff5" +
    "\057\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\067\ufff5\070" +
    "\ufff5\001\002\000\036\002\uffda\003\uffda\007\uffda\012\uffda" +
    "\023\uffda\050\uffda\056\uffda\057\uffda\061\uffda\062\uffda\063" +
    "\uffda\064\uffda\067\uffda\070\uffda\001\002\000\032\003\024" +
    "\007\015\012\022\050\034\056\023\057\014\061\033\062" +
    "\007\063\030\064\016\067\020\070\006\001\002\000\034" +
    "\003\024\007\015\012\022\023\221\050\034\056\023\057" +
    "\014\061\033\062\007\063\030\064\016\067\020\070\006" +
    "\001\002\000\004\062\222\001\002\000\004\026\223\001" +
    "\002\000\026\004\052\005\056\006\053\007\061\010\057" +
    "\014\054\026\060\045\063\065\055\066\062\001\002\000" +
    "\042\013\076\014\067\016\072\017\077\020\070\021\101" +
    "\027\225\034\104\035\102\036\071\037\074\040\100\041" +
    "\075\042\103\043\065\044\066\001\002\000\004\011\226" +
    "\001\002\000\036\002\uffe0\003\uffe0\007\uffe0\012\uffe0\023" +
    "\uffe0\050\uffe0\056\uffe0\057\uffe0\061\uffe0\062\uffe0\063\uffe0" +
    "\064\uffe0\067\uffe0\070\uffe0\001\002\000\026\004\052\005" +
    "\056\006\053\007\061\010\057\014\054\026\060\045\063" +
    "\065\055\066\062\001\002\000\042\013\076\014\067\016" +
    "\072\017\077\020\070\021\101\027\231\034\104\035\102" +
    "\036\071\037\074\040\100\041\075\042\103\043\065\044" +
    "\066\001\002\000\004\022\232\001\002\000\032\003\024" +
    "\007\015\012\022\050\034\056\023\057\014\061\033\062" +
    "\007\063\030\064\016\067\020\070\006\001\002\000\034" +
    "\003\024\007\015\012\022\023\234\050\034\056\023\057" +
    "\014\061\033\062\007\063\030\064\016\067\020\070\006" +
    "\001\002\000\040\002\uffe4\003\uffe4\007\uffe4\012\uffe4\023" +
    "\uffe4\050\uffe4\056\uffe4\057\uffe4\060\235\061\uffe4\062\uffe4" +
    "\063\uffe4\064\uffe4\067\uffe4\070\uffe4\001\002\000\006\022" +
    "\236\057\014\001\002\000\032\003\024\007\015\012\022" +
    "\050\034\056\023\057\014\061\033\062\007\063\030\064" +
    "\016\067\020\070\006\001\002\000\036\002\uffe2\003\uffe2" +
    "\007\uffe2\012\uffe2\023\uffe2\050\uffe2\056\uffe2\057\uffe2\061" +
    "\uffe2\062\uffe2\063\uffe2\064\uffe2\067\uffe2\070\uffe2\001\002" +
    "\000\034\003\024\007\015\012\022\023\241\050\034\056" +
    "\023\057\014\061\033\062\007\063\030\064\016\067\020" +
    "\070\006\001\002\000\036\002\uffe3\003\uffe3\007\uffe3\012" +
    "\uffe3\023\uffe3\050\uffe3\056\uffe3\057\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\067\uffe3\070\uffe3\001\002\000\026\004" +
    "\052\005\056\006\053\007\061\010\057\014\054\026\060" +
    "\045\063\065\055\066\062\001\002\000\042\013\076\014" +
    "\067\016\072\017\077\020\070\021\101\027\244\034\104" +
    "\035\102\036\071\037\074\040\100\041\075\042\103\043" +
    "\065\044\066\001\002\000\004\022\245\001\002\000\032" +
    "\003\024\007\015\012\022\050\034\056\023\057\014\061" +
    "\033\062\007\063\030\064\016\067\020\070\006\001\002" +
    "\000\034\003\024\007\015\012\022\023\247\050\034\056" +
    "\023\057\014\061\033\062\007\063\030\064\016\067\020" +
    "\070\006\001\002\000\036\002\uffe1\003\uffe1\007\uffe1\012" +
    "\uffe1\023\uffe1\050\uffe1\056\uffe1\057\uffe1\061\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\067\uffe1\070\uffe1\001\002\000\036\002" +
    "\uffd9\003\uffd9\007\uffd9\012\uffd9\023\uffd9\050\uffd9\056\uffd9" +
    "\057\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\067\uffd9\070" +
    "\uffd9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\040\002\035\003\012\004\004\005\031\006" +
    "\010\007\016\010\011\011\007\012\024\015\026\017\020" +
    "\020\025\021\030\022\003\023\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\144\005\031\006\010\007\016\010\011\011\007" +
    "\012\024\015\026\017\020\020\025\021\030\022\003\023" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\125\014\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\123\001\001\000\002\001\001\000" +
    "\004\014\122\001\001\000\004\014\121\001\001\000\004" +
    "\014\120\001\001\000\004\014\117\001\001\000\004\014" +
    "\116\001\001\000\004\014\115\001\001\000\002\001\001" +
    "\000\004\014\114\001\001\000\004\014\113\001\001\000" +
    "\004\014\112\001\001\000\004\014\111\001\001\000\004" +
    "\014\110\001\001\000\004\014\107\001\001\000\004\014" +
    "\106\001\001\000\004\014\105\001\001\000\004\014\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\137\024\136\025\134" +
    "\001\001\000\006\014\137\024\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\142\004\004\005\031\006\010\007\016\010" +
    "\011\011\007\012\024\015\026\017\020\020\025\021\030" +
    "\022\003\023\034\001\001\000\034\004\144\005\031\006" +
    "\010\007\016\010\011\011\007\012\024\015\026\017\020" +
    "\020\025\021\030\022\003\023\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\147" +
    "\004\004\005\031\006\010\007\016\010\011\011\007\012" +
    "\024\015\026\017\020\020\025\021\030\022\003\023\034" +
    "\001\001\000\034\004\144\005\031\006\010\007\016\010" +
    "\011\011\007\012\024\015\026\017\020\020\025\021\030" +
    "\022\003\023\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\155\001\001\000\002" +
    "\001\001\000\004\014\156\001\001\000\002\001\001\000" +
    "\010\016\162\017\163\020\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\166\004\004\005\031\006\010" +
    "\007\016\010\011\011\007\012\024\015\026\017\020\020" +
    "\025\021\030\022\003\023\034\001\001\000\034\004\144" +
    "\005\031\006\010\007\016\010\011\011\007\012\024\015" +
    "\026\017\020\020\025\021\030\022\003\023\034\001\001" +
    "\000\002\001\001\000\004\014\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\203" +
    "\001\001\000\002\001\001\000\004\014\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\217\004\004\005\031\006\010\007\016\010\011\011" +
    "\007\012\024\015\026\017\020\020\025\021\030\022\003" +
    "\023\034\001\001\000\034\004\144\005\031\006\010\007" +
    "\016\010\011\011\007\012\024\015\026\017\020\020\025" +
    "\021\030\022\003\023\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\232" +
    "\004\004\005\031\006\010\007\016\010\011\011\007\012" +
    "\024\015\026\017\020\020\025\021\030\022\003\023\034" +
    "\001\001\000\034\004\144\005\031\006\010\007\016\010" +
    "\011\011\007\012\024\015\026\017\020\020\025\021\030" +
    "\022\003\023\034\001\001\000\002\001\001\000\004\010" +
    "\236\001\001\000\036\003\237\004\004\005\031\006\010" +
    "\007\016\010\011\011\007\012\024\015\026\017\020\020" +
    "\025\021\030\022\003\023\034\001\001\000\002\001\001" +
    "\000\034\004\144\005\031\006\010\007\016\010\011\011" +
    "\007\012\024\015\026\017\020\020\025\021\030\022\003" +
    "\023\034\001\001\000\002\001\001\000\004\014\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\245" +
    "\004\004\005\031\006\010\007\016\010\011\011\007\012" +
    "\024\015\026\017\020\020\025\021\030\022\003\023\034" +
    "\001\001\000\034\004\144\005\031\006\010\007\016\010" +
    "\011\011\007\012\024\015\026\017\020\020\025\021\030" +
    "\022\003\023\034\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= INCREMENTO PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= DECREMENTO PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= BK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= CT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= error PTCOMA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SMATCH ::= MATCH EXPRESION LLAVIZQ LIST_CASES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LIST_CASES ::= LIST_CASES CASE_MATCH 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Case> a = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LIST_CASES ::= CASE_MATCH 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CASE_MATCH ::= EXPRESION FLECHA LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Case(a, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_MATCH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CASE_MATCH ::= DEFAULT FLECHA LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Case(null, a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_MATCH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IMPRESION ::= PRINT PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= VAR ID DOSPT TIPOS PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("var", b, null, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= VAR ID DOSPT TIPOS IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("var", b, c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= CONST ID DOSPT TIPOS PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("const", b, null, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= CONST ID DOSPT TIPOS IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("const", b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CFOR ::= FOR PARIZQ ASIGNACION EXPRESION PTCOMA ACTU PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACION ::= ID IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, null, null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER ELSE LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, c, null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(a, b, null, (If) c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SWHILE ::= WHILE PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWHILE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SDOWHILE ::= DO LLAVIZQ INSTRUCCIONES LLAVDER WHILE PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DoWhile(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SDOWHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INCREMENTO ::= ID INCRE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECREMENTO ::= ID DECRE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ACTU ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ACTU ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ACTU ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BK ::= BREAK PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BK",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CT ::= CONTINUE PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOS ::= RDOUBLE 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.DECIMAL);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOS ::= RSTRING 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION IGUALA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION DIFER EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION MENORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION MAYORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVar(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= CARAC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a.charAt(1), new Tipo(tipoDato.CARACTER), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= RTRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= RFALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright );    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= PARIZQ TIPOS PARDER EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
