
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.Casteo;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Match;
import instrucciones.Case;
import instrucciones.DeclaracionVector;
import instrucciones.AsignacionVector2D;
import instrucciones.DeclaracionVector2D;
import instrucciones.DeclaracionLista;
import instrucciones.AppendLista;
import instrucciones.RemoveLista;
import instrucciones.Asignacion;
import instrucciones.FuncionRound;
import instrucciones.FuncionLength;
import instrucciones.FuncionToString;
import instrucciones.FuncionFind;
import instrucciones.Metodo;
import instrucciones.Llamada;
import instrucciones.Execute;
import instrucciones.Return;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVar;
import expresiones.Incremento;
import expresiones.Decremento;
import expresiones.AccesoVector2D;
import expresiones.Acceso;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\023\007\000\002\025\004" +
    "\000\002\025\003\000\002\024\007\000\002\024\007\000" +
    "\002\005\007\000\002\006\007\000\002\006\011\000\002" +
    "\006\007\000\002\006\011\000\002\015\014\000\002\007" +
    "\006\000\002\010\011\000\002\010\015\000\002\010\013" +
    "\000\002\011\011\000\002\012\013\000\002\017\004\000" +
    "\002\020\004\000\002\016\005\000\002\016\003\000\002" +
    "\016\003\000\002\021\004\000\002\022\004\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\004\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\004\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\006\000\002\014\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\026\015\000\002\026\015\000\002\032\005" +
    "\000\002\032\003\000\002\027\017\000\002\027\017\000" +
    "\002\030\014\000\002\031\011\000\002\033\007\000\002" +
    "\033\005\000\002\034\015\000\002\035\011\000\002\036" +
    "\011\000\002\040\011\000\002\037\006\000\002\041\006" +
    "\000\002\042\006\000\002\043\006\000\002\044\010\000" +
    "\002\045\012\000\002\045\011\000\002\046\006\000\002" +
    "\046\004\000\002\047\010\000\002\047\007\000\002\051" +
    "\006\000\002\051\005\000\002\050\005\000\002\050\003" +
    "\000\002\052\005\000\002\052\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\054\003\037\007\033\011\042\012\014\014" +
    "\063\053\062\054\016\055\027\056\026\057\007\060\005" +
    "\061\006\062\032\064\023\065\051\066\020\067\064\074" +
    "\052\104\043\105\065\106\035\001\002\000\004\007\u0133" +
    "\001\002\000\016\007\uffc7\013\uffc7\027\uffc7\032\uffc7\036" +
    "\uffc7\043\uffc7\001\002\000\004\007\u011e\001\002\000\016" +
    "\007\uffc8\013\uffc8\027\uffc8\032\uffc8\036\uffc8\043\uffc8\001" +
    "\002\000\060\002\uffe6\003\uffe6\007\uffe6\011\uffe6\012\uffe6" +
    "\014\uffe6\026\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6" +
    "\067\uffe6\074\uffe6\104\uffe6\105\uffe6\106\uffe6\001\002\000" +
    "\060\002\ufff7\003\ufff7\007\ufff7\011\ufff7\012\ufff7\014\ufff7" +
    "\026\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7" +
    "\074\ufff7\104\ufff7\105\ufff7\106\ufff7\001\002\000\060\002" +
    "\uffe5\003\uffe5\007\uffe5\011\uffe5\012\uffe5\014\uffe5\026\uffe5" +
    "\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\074\uffe5" +
    "\104\uffe5\105\uffe5\106\uffe5\001\002\000\060\002\uffe9\003" +
    "\uffe9\007\uffe9\011\uffe9\012\uffe9\014\uffe9\026\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\074\uffe9\104\uffe9" +
    "\105\uffe9\106\uffe9\001\002\000\004\013\u011d\001\002\000" +
    "\060\002\ufff6\003\ufff6\007\ufff6\011\ufff6\012\ufff6\014\ufff6" +
    "\026\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\062\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6" +
    "\074\ufff6\104\ufff6\105\ufff6\106\ufff6\001\002\000\016\007" +
    "\uffcb\013\uffcb\027\uffcb\032\uffcb\036\uffcb\043\uffcb\001\002" +
    "\000\060\002\ufffe\003\ufffe\007\ufffe\011\ufffe\012\ufffe\014" +
    "\ufffe\026\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe" +
    "\060\ufffe\061\ufffe\062\ufffe\064\ufffe\065\ufffe\066\ufffe\067" +
    "\ufffe\074\ufffe\104\ufffe\105\ufffe\106\ufffe\001\002\000\004" +
    "\031\u010e\001\002\000\056\002\000\003\037\007\033\011" +
    "\042\012\014\014\063\053\062\054\016\055\027\056\026" +
    "\057\007\060\005\061\006\062\032\064\023\065\051\066" +
    "\020\067\064\074\052\104\043\105\065\106\035\001\002" +
    "\000\060\002\ufff2\003\ufff2\007\ufff2\011\ufff2\012\ufff2\014" +
    "\ufff2\026\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2" +
    "\060\ufff2\061\ufff2\062\ufff2\064\ufff2\065\ufff2\066\ufff2\067" +
    "\ufff2\074\ufff2\104\ufff2\105\ufff2\106\ufff2\001\002\000\036" +
    "\004\076\005\114\006\077\007\107\010\073\017\071\031" +
    "\102\050\101\070\116\071\113\077\112\100\115\101\106" +
    "\106\035\001\002\000\060\002\ufff1\003\ufff1\007\ufff1\011" +
    "\ufff1\012\ufff1\014\ufff1\026\ufff1\053\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\064\ufff1\065" +
    "\ufff1\066\ufff1\067\ufff1\074\ufff1\104\ufff1\105\ufff1\106\ufff1" +
    "\001\002\000\060\002\uffec\003\uffec\007\uffec\011\uffec\012" +
    "\uffec\014\uffec\026\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\057\uffec\060\uffec\061\uffec\062\uffec\064\uffec\065\uffec\066" +
    "\uffec\067\uffec\074\uffec\104\uffec\105\uffec\106\uffec\001\002" +
    "\000\016\007\uffc9\013\uffc9\027\uffc9\032\uffc9\036\uffc9\043" +
    "\uffc9\001\002\000\016\007\uffca\013\uffca\027\uffca\032\uffca" +
    "\036\uffca\043\uffca\001\002\000\004\013\375\001\002\000" +
    "\060\002\uffee\003\uffee\007\uffee\011\uffee\012\uffee\014\uffee" +
    "\026\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060" +
    "\uffee\061\uffee\062\uffee\064\uffee\065\uffee\066\uffee\067\uffee" +
    "\074\uffee\104\uffee\105\uffee\106\uffee\001\002\000\004\031" +
    "\362\001\002\000\016\027\326\031\172\034\332\035\331" +
    "\036\330\072\327\001\002\000\060\002\uffeb\003\uffeb\007" +
    "\uffeb\011\uffeb\012\uffeb\014\uffeb\026\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\064" +
    "\uffeb\065\uffeb\066\uffeb\067\uffeb\074\uffeb\104\uffeb\105\uffeb" +
    "\106\uffeb\001\002\000\040\004\076\005\114\006\077\007" +
    "\107\010\073\013\324\017\071\031\102\050\101\070\116" +
    "\071\113\077\112\100\115\101\106\106\035\001\002\000" +
    "\004\013\322\001\002\000\004\013\321\001\002\000\060" +
    "\002\ufff0\003\ufff0\007\ufff0\011\ufff0\012\ufff0\014\ufff0\026" +
    "\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0" +
    "\061\ufff0\062\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\074" +
    "\ufff0\104\ufff0\105\ufff0\106\ufff0\001\002\000\060\002\ufff8" +
    "\003\ufff8\007\ufff8\011\ufff8\012\ufff8\014\ufff8\026\ufff8\053" +
    "\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\074\ufff8\104" +
    "\ufff8\105\ufff8\106\ufff8\001\002\000\004\013\320\001\002" +
    "\000\016\007\uffc6\013\uffc6\027\uffc6\032\uffc6\036\uffc6\043" +
    "\uffc6\001\002\000\060\002\ufffb\003\ufffb\007\ufffb\011\ufffb" +
    "\012\ufffb\014\ufffb\026\ufffb\053\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\074\ufffb\104\ufffb\105\ufffb\106\ufffb\001" +
    "\002\000\060\002\ufff3\003\ufff3\007\ufff3\011\ufff3\012\ufff3" +
    "\014\ufff3\026\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\061\ufff3\062\ufff3\064\ufff3\065\ufff3\066\ufff3" +
    "\067\ufff3\074\ufff3\104\ufff3\105\ufff3\106\ufff3\001\002\000" +
    "\060\002\ufffc\003\ufffc\007\ufffc\011\ufffc\012\ufffc\014\ufffc" +
    "\026\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060" +
    "\ufffc\061\ufffc\062\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc" +
    "\074\ufffc\104\ufffc\105\ufffc\106\ufffc\001\002\000\060\002" +
    "\uffed\003\uffed\007\uffed\011\uffed\012\uffed\014\uffed\026\uffed" +
    "\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061" +
    "\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067\uffed\074\uffed" +
    "\104\uffed\105\uffed\106\uffed\001\002\000\060\002\ufff9\003" +
    "\ufff9\007\ufff9\011\ufff9\012\ufff9\014\ufff9\026\ufff9\053\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062" +
    "\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\074\ufff9\104\ufff9" +
    "\105\ufff9\106\ufff9\001\002\000\004\031\312\001\002\000" +
    "\004\041\300\001\002\000\060\002\uffef\003\uffef\007\uffef" +
    "\011\uffef\012\uffef\014\uffef\026\uffef\053\uffef\054\uffef\055" +
    "\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\064\uffef" +
    "\065\uffef\066\uffef\067\uffef\074\uffef\104\uffef\105\uffef\106" +
    "\uffef\001\002\000\060\002\ufffd\003\ufffd\007\ufffd\011\ufffd" +
    "\012\ufffd\014\ufffd\026\ufffd\053\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\064\ufffd\065\ufffd" +
    "\066\ufffd\067\ufffd\074\ufffd\104\ufffd\105\ufffd\106\ufffd\001" +
    "\002\000\060\002\uffe8\003\uffe8\007\uffe8\011\uffe8\012\uffe8" +
    "\014\uffe8\026\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8" +
    "\067\uffe8\074\uffe8\104\uffe8\105\uffe8\106\uffe8\001\002\000" +
    "\004\013\277\001\002\000\060\002\ufffa\003\ufffa\007\ufffa" +
    "\011\ufffa\012\ufffa\014\ufffa\026\ufffa\053\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\064\ufffa" +
    "\065\ufffa\066\ufffa\067\ufffa\074\ufffa\104\ufffa\105\ufffa\106" +
    "\ufffa\001\002\000\004\002\276\001\002\000\060\002\uffea" +
    "\003\uffea\007\uffea\011\uffea\012\uffea\014\uffea\026\uffea\053" +
    "\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea" +
    "\062\uffea\064\uffea\065\uffea\066\uffea\067\uffea\074\uffea\104" +
    "\uffea\105\uffea\106\uffea\001\002\000\004\007\237\001\002" +
    "\000\004\031\233\001\002\000\004\025\222\001\002\000" +
    "\004\007\066\001\002\000\004\031\067\001\002\000\040" +
    "\004\076\005\114\006\077\007\107\010\073\017\071\031" +
    "\102\032\105\050\101\070\116\071\113\077\112\100\115" +
    "\101\106\106\035\001\002\000\054\013\uffa4\015\uffa4\016" +
    "\uffa4\017\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\030\uffa4\032\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\051\uffa4\001\002" +
    "\000\036\004\076\005\114\006\077\007\107\010\073\017" +
    "\071\031\102\050\101\070\116\071\113\077\112\100\115" +
    "\101\106\106\035\001\002\000\054\013\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\030\uffa5\032\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\051\uffa5\001\002" +
    "\000\054\013\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\030\uffb0\032\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\051\uffb0\001\002\000\054\013\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025" +
    "\uffa8\030\uffa8\032\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\051\uffa8\001" +
    "\002\000\054\013\uffa6\015\uffa6\016\uffa6\017\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\024\uffa6\025\uffa6\030\uffa6\032\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\047\uffa6\051\uffa6\001\002\000\054\013\uffb2\015" +
    "\uffb2\016\uffb2\017\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\030\uffb2\032\uffb2\037\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\051\uffb2" +
    "\001\002\000\054\013\uffb3\015\uffb3\016\uffb3\017\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\030\uffb3\032\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\051\uffb3\001\002\000\054\013\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\030\uffa9\032\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\051" +
    "\uffa9\001\002\000\036\004\076\005\114\006\077\007\107" +
    "\010\073\017\071\031\102\050\101\070\116\071\113\077" +
    "\112\100\115\101\106\106\035\001\002\000\052\004\076" +
    "\005\114\006\077\007\107\010\073\017\071\031\102\050" +
    "\101\054\016\055\027\056\026\057\007\060\005\070\116" +
    "\071\113\077\112\100\115\101\106\104\043\106\035\001" +
    "\002\000\054\013\uffa7\015\uffa7\016\uffa7\017\uffa7\021\uffa7" +
    "\022\uffa7\023\uffa7\024\uffa7\025\uffa7\030\uffa7\032\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\047\uffa7\051\uffa7\001\002\000\054\013\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\030\uffaa\032\uffaa\037\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\051\uffaa" +
    "\001\002\000\004\013\212\001\002\000\004\031\207\001" +
    "\002\000\062\013\uffb1\015\uffb1\016\uffb1\017\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\027\170\030\uffb1\031" +
    "\172\032\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\047\uffb1\051\uffb1\072\171\001" +
    "\002\000\006\015\164\032\165\001\002\000\054\013\uffab" +
    "\015\uffab\016\uffab\017\uffab\021\uffab\022\uffab\023\uffab\024" +
    "\uffab\025\uffab\030\uffab\032\uffab\037\uffab\040\uffab\041\uffab" +
    "\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\051" +
    "\uffab\001\002\000\004\031\161\001\002\000\054\013\uffae" +
    "\015\uffae\016\uffae\017\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\030\uffae\032\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\051" +
    "\uffae\001\002\000\054\013\uffb4\015\uffb4\016\uffb4\017\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\030\uffb4\032" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\051\uffb4\001\002\000\004\031" +
    "\156\001\002\000\054\013\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\030\uffaf\032" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\051\uffaf\001\002\000\044\015" +
    "\uff87\016\130\017\122\021\125\022\131\023\123\024\133" +
    "\032\uff87\037\136\040\134\041\124\042\126\043\132\044" +
    "\127\045\135\046\120\047\121\001\002\000\036\004\076" +
    "\005\114\006\077\007\107\010\073\017\071\031\102\050" +
    "\101\070\116\071\113\077\112\100\115\101\106\106\035" +
    "\001\002\000\036\004\076\005\114\006\077\007\107\010" +
    "\073\017\071\031\102\050\101\070\116\071\113\077\112" +
    "\100\115\101\106\106\035\001\002\000\036\004\076\005" +
    "\114\006\077\007\107\010\073\017\071\031\102\050\101" +
    "\070\116\071\113\077\112\100\115\101\106\106\035\001" +
    "\002\000\036\004\076\005\114\006\077\007\107\010\073" +
    "\017\071\031\102\050\101\070\116\071\113\077\112\100" +
    "\115\101\106\106\035\001\002\000\036\004\076\005\114" +
    "\006\077\007\107\010\073\017\071\031\102\050\101\070" +
    "\116\071\113\077\112\100\115\101\106\106\035\001\002" +
    "\000\036\004\076\005\114\006\077\007\107\010\073\017" +
    "\071\031\102\050\101\070\116\071\113\077\112\100\115" +
    "\101\106\106\035\001\002\000\036\004\076\005\114\006" +
    "\077\007\107\010\073\017\071\031\102\050\101\070\116" +
    "\071\113\077\112\100\115\101\106\106\035\001\002\000" +
    "\036\004\076\005\114\006\077\007\107\010\073\017\071" +
    "\031\102\050\101\070\116\071\113\077\112\100\115\101" +
    "\106\106\035\001\002\000\036\004\076\005\114\006\077" +
    "\007\107\010\073\017\071\031\102\050\101\070\116\071" +
    "\113\077\112\100\115\101\106\106\035\001\002\000\036" +
    "\004\076\005\114\006\077\007\107\010\073\017\071\031" +
    "\102\050\101\070\116\071\113\077\112\100\115\101\106" +
    "\106\035\001\002\000\036\004\076\005\114\006\077\007" +
    "\107\010\073\017\071\031\102\050\101\070\116\071\113" +
    "\077\112\100\115\101\106\106\035\001\002\000\036\004" +
    "\076\005\114\006\077\007\107\010\073\017\071\031\102" +
    "\050\101\070\116\071\113\077\112\100\115\101\106\106" +
    "\035\001\002\000\036\004\076\005\114\006\077\007\107" +
    "\010\073\017\071\031\102\050\101\070\116\071\113\077" +
    "\112\100\115\101\106\106\035\001\002\000\036\004\076" +
    "\005\114\006\077\007\107\010\073\017\071\031\102\050" +
    "\101\070\116\071\113\077\112\100\115\101\106\106\035" +
    "\001\002\000\036\004\076\005\114\006\077\007\107\010" +
    "\073\017\071\031\102\050\101\070\116\071\113\077\112" +
    "\100\115\101\106\106\035\001\002\000\054\013\uffbe\015" +
    "\uffbe\016\130\017\122\021\125\022\131\023\123\024\133" +
    "\025\uffbe\030\uffbe\032\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe" +
    "\001\002\000\054\013\uffb7\015\uffb7\016\130\017\122\021" +
    "\125\022\131\023\123\024\133\025\uffb7\030\uffb7\032\uffb7" +
    "\037\136\040\134\041\124\042\126\043\132\044\127\045" +
    "\uffb7\046\120\047\121\051\uffb7\001\002\000\054\013\uffbd" +
    "\015\uffbd\016\130\017\122\021\125\022\131\023\123\024" +
    "\133\025\uffbd\030\uffbd\032\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\051" +
    "\uffbd\001\002\000\054\013\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\021\uffbf\022\uffbf\023\123\024\uffbf\025\uffbf\030\uffbf\032" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\051\uffbf\001\002\000\054\013" +
    "\uffba\015\uffba\016\130\017\122\021\125\022\131\023\123" +
    "\024\133\025\uffba\030\uffba\032\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba" +
    "\051\uffba\001\002\000\054\013\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\021\uffc1\022\uffc1\023\123\024\uffc1\025\uffc1\030\uffc1" +
    "\032\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\051\uffc1\001\002\000\054" +
    "\013\uffc4\015\uffc4\016\uffc4\017\uffc4\021\125\022\131\023" +
    "\123\024\133\025\uffc4\030\uffc4\032\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\051\uffc4\001\002\000\054\013\uffb9\015\uffb9\016\130" +
    "\017\122\021\125\022\131\023\123\024\133\025\uffb9\030" +
    "\uffb9\032\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\001\002\000" +
    "\054\013\uffbb\015\uffbb\016\130\017\122\021\125\022\131" +
    "\023\123\024\133\025\uffbb\030\uffbb\032\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\051\uffbb\001\002\000\054\013\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\021\uffc2\022\uffc2\023\123\024\uffc2\025\uffc2" +
    "\030\uffc2\032\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\001\002" +
    "\000\054\013\uffbc\015\uffbc\016\130\017\122\021\125\022" +
    "\131\023\123\024\133\025\uffbc\030\uffbc\032\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\051\uffbc\001\002\000\052\013\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\021\uffc0\022\uffc0\024\uffc0\025\uffc0\030" +
    "\uffc0\032\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0\001\002\000" +
    "\054\013\uffc3\015\uffc3\016\uffc3\017\uffc3\021\125\022\131" +
    "\023\123\024\133\025\uffc3\030\uffc3\032\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\051\uffc3\001\002\000\054\013\uffb6\015\uffb6\016" +
    "\130\017\122\021\125\022\131\023\123\024\133\025\uffb6" +
    "\030\uffb6\032\uffb6\037\136\040\134\041\124\042\126\043" +
    "\132\044\127\045\uffb6\046\uffb6\047\uffb6\051\uffb6\001\002" +
    "\000\054\013\uffb8\015\uffb8\016\130\017\122\021\125\022" +
    "\131\023\123\024\133\025\uffb8\030\uffb8\032\uffb8\037\136" +
    "\040\134\041\124\042\126\043\132\044\127\045\uffb8\046" +
    "\uffb8\047\121\051\uffb8\001\002\000\036\004\076\005\114" +
    "\006\077\007\107\010\073\017\071\031\102\050\101\070" +
    "\116\071\113\077\112\100\115\101\106\106\035\001\002" +
    "\000\042\016\130\017\122\021\125\022\131\023\123\024" +
    "\133\032\160\037\136\040\134\041\124\042\126\043\132" +
    "\044\127\045\135\046\120\047\121\001\002\000\054\013" +
    "\uff93\015\uff93\016\uff93\017\uff93\021\uff93\022\uff93\023\uff93" +
    "\024\uff93\025\uff93\030\uff93\032\uff93\037\uff93\040\uff93\041" +
    "\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93" +
    "\051\uff93\001\002\000\036\004\076\005\114\006\077\007" +
    "\107\010\073\017\071\031\102\050\101\070\116\071\113" +
    "\077\112\100\115\101\106\106\035\001\002\000\042\016" +
    "\130\017\122\021\125\022\131\023\123\024\133\032\163" +
    "\037\136\040\134\041\124\042\126\043\132\044\127\045" +
    "\135\046\120\047\121\001\002\000\054\013\uff94\015\uff94" +
    "\016\uff94\017\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025" +
    "\uff94\030\uff94\032\uff94\037\uff94\040\uff94\041\uff94\042\uff94" +
    "\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\051\uff94\001" +
    "\002\000\036\004\076\005\114\006\077\007\107\010\073" +
    "\017\071\031\102\050\101\070\116\071\113\077\112\100" +
    "\115\101\106\106\035\001\002\000\004\013\166\001\002" +
    "\000\060\002\uff8c\003\uff8c\007\uff8c\011\uff8c\012\uff8c\014" +
    "\uff8c\026\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c" +
    "\060\uff8c\061\uff8c\062\uff8c\064\uff8c\065\uff8c\066\uff8c\067" +
    "\uff8c\074\uff8c\104\uff8c\105\uff8c\106\uff8c\001\002\000\044" +
    "\015\uff88\016\130\017\122\021\125\022\131\023\123\024" +
    "\133\032\uff88\037\136\040\134\041\124\042\126\043\132" +
    "\044\127\045\135\046\120\047\121\001\002\000\036\004" +
    "\076\005\114\006\077\007\107\010\073\017\071\031\102" +
    "\050\101\070\116\071\113\077\112\100\115\101\106\106" +
    "\035\001\002\000\004\102\176\001\002\000\040\004\076" +
    "\005\114\006\077\007\107\010\073\017\071\031\102\032" +
    "\173\050\101\070\116\071\113\077\112\100\115\101\106" +
    "\106\035\001\002\000\054\013\uff89\015\uff89\016\uff89\017" +
    "\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89\030\uff89" +
    "\032\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044" +
    "\uff89\045\uff89\046\uff89\047\uff89\051\uff89\001\002\000\006" +
    "\015\164\032\175\001\002\000\054\013\uff8a\015\uff8a\016" +
    "\uff8a\017\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a" +
    "\030\uff8a\032\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\051\uff8a\001\002" +
    "\000\004\031\177\001\002\000\036\004\076\005\114\006" +
    "\077\007\107\010\073\017\071\031\102\050\101\070\116" +
    "\071\113\077\112\100\115\101\106\106\035\001\002\000" +
    "\042\016\130\017\122\021\125\022\131\023\123\024\133" +
    "\032\201\037\136\040\134\041\124\042\126\043\132\044" +
    "\127\045\135\046\120\047\121\001\002\000\054\013\uff91" +
    "\015\uff91\016\uff91\017\uff91\021\uff91\022\uff91\023\uff91\024" +
    "\uff91\025\uff91\030\uff91\032\uff91\037\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\051" +
    "\uff91\001\002\000\042\016\130\017\122\021\125\022\131" +
    "\023\123\024\133\030\203\037\136\040\134\041\124\042" +
    "\126\043\132\044\127\045\135\046\120\047\121\001\002" +
    "\000\056\013\uff95\015\uff95\016\uff95\017\uff95\021\uff95\022" +
    "\uff95\023\uff95\024\uff95\025\uff95\027\204\030\uff95\032\uff95" +
    "\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045" +
    "\uff95\046\uff95\047\uff95\051\uff95\001\002\000\036\004\076" +
    "\005\114\006\077\007\107\010\073\017\071\031\102\050" +
    "\101\070\116\071\113\077\112\100\115\101\106\106\035" +
    "\001\002\000\042\016\130\017\122\021\125\022\131\023" +
    "\123\024\133\030\206\037\136\040\134\041\124\042\126" +
    "\043\132\044\127\045\135\046\120\047\121\001\002\000" +
    "\054\013\uff9c\015\uff9c\016\uff9c\017\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\030\uff9c\032\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\051\uff9c\001\002\000\036\004\076\005\114\006" +
    "\077\007\107\010\073\017\071\031\102\050\101\070\116" +
    "\071\113\077\112\100\115\101\106\106\035\001\002\000" +
    "\042\016\130\017\122\021\125\022\131\023\123\024\133" +
    "\032\211\037\136\040\134\041\124\042\126\043\132\044" +
    "\127\045\135\046\120\047\121\001\002\000\054\013\uff92" +
    "\015\uff92\016\uff92\017\uff92\021\uff92\022\uff92\023\uff92\024" +
    "\uff92\025\uff92\030\uff92\032\uff92\037\uff92\040\uff92\041\uff92" +
    "\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\051" +
    "\uff92\001\002\000\060\002\uff8b\003\uff8b\007\uff8b\011\uff8b" +
    "\012\uff8b\014\uff8b\026\uff8b\053\uff8b\054\uff8b\055\uff8b\056" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\064\uff8b\065\uff8b" +
    "\066\uff8b\067\uff8b\074\uff8b\104\uff8b\105\uff8b\106\uff8b\001" +
    "\002\000\004\032\216\001\002\000\042\016\130\017\122" +
    "\021\125\022\131\023\123\024\133\032\215\037\136\040" +
    "\134\041\124\042\126\043\132\044\127\045\135\046\120" +
    "\047\121\001\002\000\054\013\uffac\015\uffac\016\uffac\017" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\030\uffac" +
    "\032\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\046\uffac\047\uffac\051\uffac\001\002\000\036" +
    "\004\076\005\114\006\077\007\107\010\073\017\071\031" +
    "\102\050\101\070\116\071\113\077\112\100\115\101\106" +
    "\106\035\001\002\000\054\013\uffad\015\uffad\016\130\017" +
    "\122\021\125\022\131\023\123\024\133\025\uffad\030\uffad" +
    "\032\uffad\037\136\040\134\041\124\042\126\043\132\044" +
    "\127\045\135\046\120\047\121\051\uffad\001\002\000\054" +
    "\013\uffb5\015\uffb5\016\130\017\122\021\125\022\131\023" +
    "\123\024\133\025\uffb5\030\uffb5\032\uffb5\037\136\040\134" +
    "\041\124\042\126\043\132\044\127\045\uffb5\046\uffb5\047" +
    "\uffb5\051\uffb5\001\002\000\054\013\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\030" +
    "\uffc5\032\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\001\002\000" +
    "\054\003\037\007\033\011\042\012\014\014\063\053\062" +
    "\054\016\055\027\056\026\057\007\060\005\061\006\062" +
    "\032\064\023\065\051\066\020\067\064\074\052\104\043" +
    "\105\065\106\035\001\002\000\056\003\037\007\033\011" +
    "\042\012\014\014\063\026\225\053\062\054\016\055\027" +
    "\056\026\057\007\060\005\061\006\062\032\064\023\065" +
    "\051\066\020\067\064\074\052\104\043\105\065\106\035" +
    "\001\002\000\060\002\uffff\003\uffff\007\uffff\011\uffff\012" +
    "\uffff\014\uffff\026\uffff\053\uffff\054\uffff\055\uffff\056\uffff" +
    "\057\uffff\060\uffff\061\uffff\062\uffff\064\uffff\065\uffff\066" +
    "\uffff\067\uffff\074\uffff\104\uffff\105\uffff\106\uffff\001\002" +
    "\000\004\065\226\001\002\000\004\031\227\001\002\000" +
    "\036\004\076\005\114\006\077\007\107\010\073\017\071" +
    "\031\102\050\101\070\116\071\113\077\112\100\115\101" +
    "\106\106\035\001\002\000\042\016\130\017\122\021\125" +
    "\022\131\023\123\024\133\032\231\037\136\040\134\041" +
    "\124\042\126\043\132\044\127\045\135\046\120\047\121" +
    "\001\002\000\004\013\232\001\002\000\060\002\uffd3\003" +
    "\uffd3\007\uffd3\011\uffd3\012\uffd3\014\uffd3\026\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\074\uffd3\104\uffd3" +
    "\105\uffd3\106\uffd3\001\002\000\036\004\076\005\114\006" +
    "\077\007\107\010\073\017\071\031\102\050\101\070\116" +
    "\071\113\077\112\100\115\101\106\106\035\001\002\000" +
    "\042\016\130\017\122\021\125\022\131\023\123\024\133" +
    "\032\235\037\136\040\134\041\124\042\126\043\132\044" +
    "\127\045\135\046\120\047\121\001\002\000\004\013\236" +
    "\001\002\000\060\002\uffde\003\uffde\007\uffde\011\uffde\012" +
    "\uffde\014\uffde\026\uffde\053\uffde\054\uffde\055\uffde\056\uffde" +
    "\057\uffde\060\uffde\061\uffde\062\uffde\064\uffde\065\uffde\066" +
    "\uffde\067\uffde\074\uffde\104\uffde\105\uffde\106\uffde\001\002" +
    "\000\004\033\240\001\002\000\016\054\016\055\027\056" +
    "\026\057\007\060\005\104\043\001\002\000\010\013\244" +
    "\027\242\036\243\001\002\000\004\030\247\001\002\000" +
    "\036\004\076\005\114\006\077\007\107\010\073\017\071" +
    "\031\102\050\101\070\116\071\113\077\112\100\115\101" +
    "\106\106\035\001\002\000\060\002\uffdd\003\uffdd\007\uffdd" +
    "\011\uffdd\012\uffdd\014\uffdd\026\uffdd\053\uffdd\054\uffdd\055" +
    "\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\064\uffdd" +
    "\065\uffdd\066\uffdd\067\uffdd\074\uffdd\104\uffdd\105\uffdd\106" +
    "\uffdd\001\002\000\042\013\246\016\130\017\122\021\125" +
    "\022\131\023\123\024\133\037\136\040\134\041\124\042" +
    "\126\043\132\044\127\045\135\046\120\047\121\001\002" +
    "\000\060\002\uffdc\003\uffdc\007\uffdc\011\uffdc\012\uffdc\014" +
    "\uffdc\026\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\061\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc\067" +
    "\uffdc\074\uffdc\104\uffdc\105\uffdc\106\uffdc\001\002\000\006" +
    "\027\250\036\251\001\002\000\004\030\261\001\002\000" +
    "\004\027\252\001\002\000\036\004\076\005\114\006\077" +
    "\007\107\010\073\017\071\031\102\050\101\070\116\071" +
    "\113\077\112\100\115\101\106\106\035\001\002\000\006" +
    "\015\255\030\256\001\002\000\044\015\uffa0\016\130\017" +
    "\122\021\125\022\131\023\123\024\133\030\uffa0\037\136" +
    "\040\134\041\124\042\126\043\132\044\127\045\135\046" +
    "\120\047\121\001\002\000\036\004\076\005\114\006\077" +
    "\007\107\010\073\017\071\031\102\050\101\070\116\071" +
    "\113\077\112\100\115\101\106\106\035\001\002\000\004" +
    "\013\257\001\002\000\060\002\uffa3\003\uffa3\007\uffa3\011" +
    "\uffa3\012\uffa3\014\uffa3\026\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\064\uffa3\065" +
    "\uffa3\066\uffa3\067\uffa3\074\uffa3\104\uffa3\105\uffa3\106\uffa3" +
    "\001\002\000\044\015\uffa1\016\130\017\122\021\125\022" +
    "\131\023\123\024\133\030\uffa1\037\136\040\134\041\124" +
    "\042\126\043\132\044\127\045\135\046\120\047\121\001" +
    "\002\000\004\036\262\001\002\000\004\027\263\001\002" +
    "\000\004\027\264\001\002\000\036\004\076\005\114\006" +
    "\077\007\107\010\073\017\071\031\102\050\101\070\116" +
    "\071\113\077\112\100\115\101\106\106\035\001\002\000" +
    "\006\015\266\030\267\001\002\000\004\027\271\001\002" +
    "\000\004\013\270\001\002\000\060\002\uff9f\003\uff9f\007" +
    "\uff9f\011\uff9f\012\uff9f\014\uff9f\026\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\064" +
    "\uff9f\065\uff9f\066\uff9f\067\uff9f\074\uff9f\104\uff9f\105\uff9f" +
    "\106\uff9f\001\002\000\036\004\076\005\114\006\077\007" +
    "\107\010\073\017\071\031\102\050\101\070\116\071\113" +
    "\077\112\100\115\101\106\106\035\001\002\000\006\015" +
    "\255\030\273\001\002\000\006\015\uff9b\030\uff9b\001\002" +
    "\000\006\015\255\030\275\001\002\000\006\015\uff9a\030" +
    "\uff9a\001\002\000\004\002\001\001\002\000\060\002\uffe7" +
    "\003\uffe7\007\uffe7\011\uffe7\012\uffe7\014\uffe7\026\uffe7\053" +
    "\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7" +
    "\062\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\074\uffe7\104" +
    "\uffe7\105\uffe7\106\uffe7\001\002\000\016\054\016\055\027" +
    "\056\026\057\007\060\005\104\043\001\002\000\004\043" +
    "\302\001\002\000\004\007\303\001\002\000\004\036\304" +
    "\001\002\000\004\076\305\001\002\000\004\074\306\001" +
    "\002\000\004\031\307\001\002\000\004\032\310\001\002" +
    "\000\004\013\311\001\002\000\060\002\uff99\003\uff99\007" +
    "\uff99\011\uff99\012\uff99\014\uff99\026\uff99\053\uff99\054\uff99" +
    "\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99\064" +
    "\uff99\065\uff99\066\uff99\067\uff99\074\uff99\104\uff99\105\uff99" +
    "\106\uff99\001\002\000\036\004\076\005\114\006\077\007" +
    "\107\010\073\017\071\031\102\050\101\070\116\071\113" +
    "\077\112\100\115\101\106\106\035\001\002\000\042\016" +
    "\130\017\122\021\125\022\131\023\123\024\133\032\314" +
    "\037\136\040\134\041\124\042\126\043\132\044\127\045" +
    "\135\046\120\047\121\001\002\000\004\025\315\001\002" +
    "\000\054\003\037\007\033\011\042\012\014\014\063\053" +
    "\062\054\016\055\027\056\026\057\007\060\005\061\006" +
    "\062\032\064\023\065\051\066\020\067\064\074\052\104" +
    "\043\105\065\106\035\001\002\000\056\003\037\007\033" +
    "\011\042\012\014\014\063\026\317\053\062\054\016\055" +
    "\027\056\026\057\007\060\005\061\006\062\032\064\023" +
    "\065\051\066\020\067\064\074\052\104\043\105\065\106" +
    "\035\001\002\000\060\002\uffd4\003\uffd4\007\uffd4\011\uffd4" +
    "\012\uffd4\014\uffd4\026\uffd4\053\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\064\uffd4\065\uffd4" +
    "\066\uffd4\067\uffd4\074\uffd4\104\uffd4\105\uffd4\106\uffd4\001" +
    "\002\000\060\002\uffcd\003\uffcd\007\uffcd\011\uffcd\012\uffcd" +
    "\014\uffcd\026\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\064\uffcd\065\uffcd\066\uffcd" +
    "\067\uffcd\074\uffcd\104\uffcd\105\uffcd\106\uffcd\001\002\000" +
    "\060\002\uffe4\003\uffe4\007\uffe4\011\uffe4\012\uffe4\014\uffe4" +
    "\026\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060" +
    "\uffe4\061\uffe4\062\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4" +
    "\074\uffe4\104\uffe4\105\uffe4\106\uffe4\001\002\000\060\002" +
    "\ufff4\003\ufff4\007\ufff4\011\ufff4\012\ufff4\014\ufff4\026\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061" +
    "\ufff4\062\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\074\ufff4" +
    "\104\ufff4\105\ufff4\106\ufff4\001\002\000\042\013\325\016" +
    "\130\017\122\021\125\022\131\023\123\024\133\037\136" +
    "\040\134\041\124\042\126\043\132\044\127\045\135\046" +
    "\120\047\121\001\002\000\132\002\uff85\003\uff85\007\uff85" +
    "\011\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017" +
    "\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85" +
    "\030\uff85\032\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043" +
    "\uff85\044\uff85\045\uff85\046\uff85\047\uff85\051\uff85\053\uff85" +
    "\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061\uff85\062" +
    "\uff85\064\uff85\065\uff85\066\uff85\067\uff85\074\uff85\104\uff85" +
    "\105\uff85\106\uff85\001\002\000\132\002\uff86\003\uff86\007" +
    "\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86" +
    "\017\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86\026" +
    "\uff86\030\uff86\032\uff86\037\uff86\040\uff86\041\uff86\042\uff86" +
    "\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\051\uff86\053" +
    "\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86" +
    "\062\uff86\064\uff86\065\uff86\066\uff86\067\uff86\074\uff86\104" +
    "\uff86\105\uff86\106\uff86\001\002\000\036\004\076\005\114" +
    "\006\077\007\107\010\073\017\071\031\102\050\101\070" +
    "\116\071\113\077\112\100\115\101\106\106\035\001\002" +
    "\000\006\073\335\075\336\001\002\000\036\004\076\005" +
    "\114\006\077\007\107\010\073\017\071\031\102\050\101" +
    "\070\116\071\113\077\112\100\115\101\106\106\035\001" +
    "\002\000\006\013\uffd1\032\uffd1\001\002\000\006\013\uffd2" +
    "\032\uffd2\001\002\000\042\013\334\016\130\017\122\021" +
    "\125\022\131\023\123\024\133\037\136\040\134\041\124" +
    "\042\126\043\132\044\127\045\135\046\120\047\121\001" +
    "\002\000\110\002\uffd8\003\uffd8\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\012\uffd8\014\uffd8\017\uffd8\026" +
    "\uffd8\031\uffd8\050\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\062\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\070\uffd8\071\uffd8\074\uffd8\077\uffd8\100\uffd8" +
    "\101\uffd8\104\uffd8\105\uffd8\106\uffd8\001\002\000\004\031" +
    "\343\001\002\000\004\031\337\001\002\000\036\004\076" +
    "\005\114\006\077\007\107\010\073\017\071\031\102\050" +
    "\101\070\116\071\113\077\112\100\115\101\106\106\035" +
    "\001\002\000\042\016\130\017\122\021\125\022\131\023" +
    "\123\024\133\032\341\037\136\040\134\041\124\042\126" +
    "\043\132\044\127\045\135\046\120\047\121\001\002\000" +
    "\004\013\342\001\002\000\060\002\uff97\003\uff97\007\uff97" +
    "\011\uff97\012\uff97\014\uff97\026\uff97\053\uff97\054\uff97\055" +
    "\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97\064\uff97" +
    "\065\uff97\066\uff97\067\uff97\074\uff97\104\uff97\105\uff97\106" +
    "\uff97\001\002\000\036\004\076\005\114\006\077\007\107" +
    "\010\073\017\071\031\102\050\101\070\116\071\113\077" +
    "\112\100\115\101\106\106\035\001\002\000\042\016\130" +
    "\017\122\021\125\022\131\023\123\024\133\032\345\037" +
    "\136\040\134\041\124\042\126\043\132\044\127\045\135" +
    "\046\120\047\121\001\002\000\004\013\346\001\002\000" +
    "\060\002\uff98\003\uff98\007\uff98\011\uff98\012\uff98\014\uff98" +
    "\026\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060" +
    "\uff98\061\uff98\062\uff98\064\uff98\065\uff98\066\uff98\067\uff98" +
    "\074\uff98\104\uff98\105\uff98\106\uff98\001\002\000\042\016" +
    "\130\017\122\021\125\022\131\023\123\024\133\030\350" +
    "\037\136\040\134\041\124\042\126\043\132\044\127\045" +
    "\135\046\120\047\121\001\002\000\064\002\uff95\003\uff95" +
    "\007\uff95\011\uff95\012\uff95\014\uff95\026\uff95\027\351\036" +
    "\352\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95" +
    "\061\uff95\062\uff95\064\uff95\065\uff95\066\uff95\067\uff95\074" +
    "\uff95\104\uff95\105\uff95\106\uff95\001\002\000\036\004\076" +
    "\005\114\006\077\007\107\010\073\017\071\031\102\050" +
    "\101\070\116\071\113\077\112\100\115\101\106\106\035" +
    "\001\002\000\036\004\076\005\114\006\077\007\107\010" +
    "\073\017\071\031\102\050\101\070\116\071\113\077\112" +
    "\100\115\101\106\106\035\001\002\000\042\013\354\016" +
    "\130\017\122\021\125\022\131\023\123\024\133\037\136" +
    "\040\134\041\124\042\126\043\132\044\127\045\135\046" +
    "\120\047\121\001\002\000\060\002\uff96\003\uff96\007\uff96" +
    "\011\uff96\012\uff96\014\uff96\026\uff96\053\uff96\054\uff96\055" +
    "\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96\064\uff96" +
    "\065\uff96\066\uff96\067\uff96\074\uff96\104\uff96\105\uff96\106" +
    "\uff96\001\002\000\042\016\130\017\122\021\125\022\131" +
    "\023\123\024\133\030\356\037\136\040\134\041\124\042" +
    "\126\043\132\044\127\045\135\046\120\047\121\001\002" +
    "\000\004\036\357\001\002\000\036\004\076\005\114\006" +
    "\077\007\107\010\073\017\071\031\102\050\101\070\116" +
    "\071\113\077\112\100\115\101\106\106\035\001\002\000" +
    "\042\013\361\016\130\017\122\021\125\022\131\023\123" +
    "\024\133\037\136\040\134\041\124\042\126\043\132\044" +
    "\127\045\135\046\120\047\121\001\002\000\060\002\uff9d" +
    "\003\uff9d\007\uff9d\011\uff9d\012\uff9d\014\uff9d\026\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d" +
    "\062\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\074\uff9d\104" +
    "\uff9d\105\uff9d\106\uff9d\001\002\000\036\004\076\005\114" +
    "\006\077\007\107\010\073\017\071\031\102\050\101\070" +
    "\116\071\113\077\112\100\115\101\106\106\035\001\002" +
    "\000\042\016\130\017\122\021\125\022\131\023\123\024" +
    "\133\032\364\037\136\040\134\041\124\042\126\043\132" +
    "\044\127\045\135\046\120\047\121\001\002\000\004\025" +
    "\365\001\002\000\054\003\037\007\033\011\042\012\014" +
    "\014\063\053\062\054\016\055\027\056\026\057\007\060" +
    "\005\061\006\062\032\064\023\065\051\066\020\067\064" +
    "\074\052\104\043\105\065\106\035\001\002\000\056\003" +
    "\037\007\033\011\042\012\014\014\063\026\367\053\062" +
    "\054\016\055\027\056\026\057\007\060\005\061\006\062" +
    "\032\064\023\065\051\066\020\067\064\074\052\104\043" +
    "\105\065\106\035\001\002\000\062\002\uffd7\003\uffd7\007" +
    "\uffd7\011\uffd7\012\uffd7\014\uffd7\026\uffd7\053\uffd7\054\uffd7" +
    "\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063" +
    "\370\064\uffd7\065\uffd7\066\uffd7\067\uffd7\074\uffd7\104\uffd7" +
    "\105\uffd7\106\uffd7\001\002\000\006\025\371\062\032\001" +
    "\002\000\054\003\037\007\033\011\042\012\014\014\063" +
    "\053\062\054\016\055\027\056\026\057\007\060\005\061" +
    "\006\062\032\064\023\065\051\066\020\067\064\074\052" +
    "\104\043\105\065\106\035\001\002\000\060\002\uffd5\003" +
    "\uffd5\007\uffd5\011\uffd5\012\uffd5\014\uffd5\026\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062" +
    "\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\074\uffd5\104\uffd5" +
    "\105\uffd5\106\uffd5\001\002\000\056\003\037\007\033\011" +
    "\042\012\014\014\063\026\374\053\062\054\016\055\027" +
    "\056\026\057\007\060\005\061\006\062\032\064\023\065" +
    "\051\066\020\067\064\074\052\104\043\105\065\106\035" +
    "\001\002\000\060\002\uffd6\003\uffd6\007\uffd6\011\uffd6\012" +
    "\uffd6\014\uffd6\026\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6" +
    "\057\uffd6\060\uffd6\061\uffd6\062\uffd6\064\uffd6\065\uffd6\066" +
    "\uffd6\067\uffd6\074\uffd6\104\uffd6\105\uffd6\106\uffd6\001\002" +
    "\000\060\002\ufff5\003\ufff5\007\ufff5\011\ufff5\012\ufff5\014" +
    "\ufff5\026\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5" +
    "\060\ufff5\061\ufff5\062\ufff5\064\ufff5\065\ufff5\066\ufff5\067" +
    "\ufff5\074\ufff5\104\ufff5\105\ufff5\106\ufff5\001\002\000\042" +
    "\016\130\017\122\021\125\022\131\023\123\024\133\025" +
    "\377\037\136\040\134\041\124\042\126\043\132\044\127" +
    "\045\135\046\120\047\121\001\002\000\040\004\076\005" +
    "\114\006\077\007\107\010\073\017\071\031\102\050\101" +
    "\052\u0101\070\116\071\113\077\112\100\115\101\106\106" +
    "\035\001\002\000\042\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\017\uffe1\026\uffe1\031\uffe1\050\uffe1\052\uffe1\070" +
    "\uffe1\071\uffe1\077\uffe1\100\uffe1\101\uffe1\106\uffe1\001\002" +
    "\000\004\051\u010a\001\002\000\042\016\130\017\122\021" +
    "\125\022\131\023\123\024\133\037\136\040\134\041\124" +
    "\042\126\043\132\044\127\045\135\046\120\047\121\051" +
    "\u0106\001\002\000\042\004\076\005\114\006\077\007\107" +
    "\010\073\017\071\026\u0104\031\102\050\101\052\u0101\070" +
    "\116\071\113\077\112\100\115\101\106\106\035\001\002" +
    "\000\060\002\uffe3\003\uffe3\007\uffe3\011\uffe3\012\uffe3\014" +
    "\uffe3\026\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\064\uffe3\065\uffe3\066\uffe3\067" +
    "\uffe3\074\uffe3\104\uffe3\105\uffe3\106\uffe3\001\002\000\042" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\017\uffe2\026" +
    "\uffe2\031\uffe2\050\uffe2\052\uffe2\070\uffe2\071\uffe2\077\uffe2" +
    "\100\uffe2\101\uffe2\106\uffe2\001\002\000\004\025\u0107\001" +
    "\002\000\054\003\037\007\033\011\042\012\014\014\063" +
    "\053\062\054\016\055\027\056\026\057\007\060\005\061" +
    "\006\062\032\064\023\065\051\066\020\067\064\074\052" +
    "\104\043\105\065\106\035\001\002\000\056\003\037\007" +
    "\033\011\042\012\014\014\063\026\u0109\053\062\054\016" +
    "\055\027\056\026\057\007\060\005\061\006\062\032\064" +
    "\023\065\051\066\020\067\064\074\052\104\043\105\065" +
    "\106\035\001\002\000\042\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\017\uffe0\026\uffe0\031\uffe0\050\uffe0\052\uffe0" +
    "\070\uffe0\071\uffe0\077\uffe0\100\uffe0\101\uffe0\106\uffe0\001" +
    "\002\000\004\025\u010b\001\002\000\054\003\037\007\033" +
    "\011\042\012\014\014\063\053\062\054\016\055\027\056" +
    "\026\057\007\060\005\061\006\062\032\064\023\065\051" +
    "\066\020\067\064\074\052\104\043\105\065\106\035\001" +
    "\002\000\056\003\037\007\033\011\042\012\014\014\063" +
    "\026\u010d\053\062\054\016\055\027\056\026\057\007\060" +
    "\005\061\006\062\032\064\023\065\051\066\020\067\064" +
    "\074\052\104\043\105\065\106\035\001\002\000\042\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\017\uffdf\026\uffdf" +
    "\031\uffdf\050\uffdf\052\uffdf\070\uffdf\071\uffdf\077\uffdf\100" +
    "\uffdf\101\uffdf\106\uffdf\001\002\000\004\007\u010f\001\002" +
    "\000\004\036\330\001\002\000\036\004\076\005\114\006" +
    "\077\007\107\010\073\017\071\031\102\050\101\070\116" +
    "\071\113\077\112\100\115\101\106\106\035\001\002\000" +
    "\042\013\u0112\016\130\017\122\021\125\022\131\023\123" +
    "\024\133\037\136\040\134\041\124\042\126\043\132\044" +
    "\127\045\135\046\120\047\121\001\002\000\004\007\u0113" +
    "\001\002\000\010\034\332\035\331\036\u011b\001\002\000" +
    "\004\032\uffce\001\002\000\004\032\u0117\001\002\000\004" +
    "\032\uffcf\001\002\000\004\025\u0118\001\002\000\054\003" +
    "\037\007\033\011\042\012\014\014\063\053\062\054\016" +
    "\055\027\056\026\057\007\060\005\061\006\062\032\064" +
    "\023\065\051\066\020\067\064\074\052\104\043\105\065" +
    "\106\035\001\002\000\056\003\037\007\033\011\042\012" +
    "\014\014\063\026\u011a\053\062\054\016\055\027\056\026" +
    "\057\007\060\005\061\006\062\032\064\023\065\051\066" +
    "\020\067\064\074\052\104\043\105\065\106\035\001\002" +
    "\000\060\002\uffd9\003\uffd9\007\uffd9\011\uffd9\012\uffd9\014" +
    "\uffd9\026\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\062\uffd9\064\uffd9\065\uffd9\066\uffd9\067" +
    "\uffd9\074\uffd9\104\uffd9\105\uffd9\106\uffd9\001\002\000\036" +
    "\004\076\005\114\006\077\007\107\010\073\017\071\031" +
    "\102\050\101\070\116\071\113\077\112\100\115\101\106" +
    "\106\035\001\002\000\042\016\130\017\122\021\125\022" +
    "\131\023\123\024\133\032\uffd0\037\136\040\134\041\124" +
    "\042\126\043\132\044\127\045\135\046\120\047\121\001" +
    "\002\000\060\002\uffcc\003\uffcc\007\uffcc\011\uffcc\012\uffcc" +
    "\014\uffcc\026\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\074\uffcc\104\uffcc\105\uffcc\106\uffcc\001\002\000" +
    "\004\033\u011f\001\002\000\016\054\016\055\027\056\026" +
    "\057\007\060\005\104\043\001\002\000\010\013\u0123\027" +
    "\u0121\036\u0122\001\002\000\004\030\u0126\001\002\000\036" +
    "\004\076\005\114\006\077\007\107\010\073\017\071\031" +
    "\102\050\101\070\116\071\113\077\112\100\115\101\106" +
    "\106\035\001\002\000\060\002\uffdb\003\uffdb\007\uffdb\011" +
    "\uffdb\012\uffdb\014\uffdb\026\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\064\uffdb\065" +
    "\uffdb\066\uffdb\067\uffdb\074\uffdb\104\uffdb\105\uffdb\106\uffdb" +
    "\001\002\000\042\013\u0125\016\130\017\122\021\125\022" +
    "\131\023\123\024\133\037\136\040\134\041\124\042\126" +
    "\043\132\044\127\045\135\046\120\047\121\001\002\000" +
    "\060\002\uffda\003\uffda\007\uffda\011\uffda\012\uffda\014\uffda" +
    "\026\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\061\uffda\062\uffda\064\uffda\065\uffda\066\uffda\067\uffda" +
    "\074\uffda\104\uffda\105\uffda\106\uffda\001\002\000\006\027" +
    "\u0127\036\u0128\001\002\000\004\030\u012d\001\002\000\004" +
    "\027\u0129\001\002\000\036\004\076\005\114\006\077\007" +
    "\107\010\073\017\071\031\102\050\101\070\116\071\113" +
    "\077\112\100\115\101\106\106\035\001\002\000\006\015" +
    "\255\030\u012b\001\002\000\004\013\u012c\001\002\000\060" +
    "\002\uffa2\003\uffa2\007\uffa2\011\uffa2\012\uffa2\014\uffa2\026" +
    "\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\074" +
    "\uffa2\104\uffa2\105\uffa2\106\uffa2\001\002\000\004\036\u012e" +
    "\001\002\000\004\027\u012f\001\002\000\004\027\264\001" +
    "\002\000\006\015\266\030\u0131\001\002\000\004\013\u0132" +
    "\001\002\000\060\002\uff9e\003\uff9e\007\uff9e\011\uff9e\012" +
    "\uff9e\014\uff9e\026\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e" +
    "\057\uff9e\060\uff9e\061\uff9e\062\uff9e\064\uff9e\065\uff9e\066" +
    "\uff9e\067\uff9e\074\uff9e\104\uff9e\105\uff9e\106\uff9e\001\002" +
    "\000\004\031\u0134\001\002\000\020\032\u0136\054\016\055" +
    "\027\056\026\057\007\060\005\104\043\001\002\000\006" +
    "\015\u013c\032\u013d\001\002\000\004\025\u0139\001\002\000" +
    "\004\007\u0138\001\002\000\006\015\uff8d\032\uff8d\001\002" +
    "\000\054\003\037\007\033\011\042\012\014\014\063\053" +
    "\062\054\016\055\027\056\026\057\007\060\005\061\006" +
    "\062\032\064\023\065\051\066\020\067\064\074\052\104" +
    "\043\105\065\106\035\001\002\000\056\003\037\007\033" +
    "\011\042\012\014\014\063\026\u013b\053\062\054\016\055" +
    "\027\056\026\057\007\060\005\061\006\062\032\064\023" +
    "\065\051\066\020\067\064\074\052\104\043\105\065\106" +
    "\035\001\002\000\060\002\uff8f\003\uff8f\007\uff8f\011\uff8f" +
    "\012\uff8f\014\uff8f\026\uff8f\053\uff8f\054\uff8f\055\uff8f\056" +
    "\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\064\uff8f\065\uff8f" +
    "\066\uff8f\067\uff8f\074\uff8f\104\uff8f\105\uff8f\106\uff8f\001" +
    "\002\000\016\054\016\055\027\056\026\057\007\060\005" +
    "\104\043\001\002\000\004\025\u013e\001\002\000\054\003" +
    "\037\007\033\011\042\012\014\014\063\053\062\054\016" +
    "\055\027\056\026\057\007\060\005\061\006\062\032\064" +
    "\023\065\051\066\020\067\064\074\052\104\043\105\065" +
    "\106\035\001\002\000\056\003\037\007\033\011\042\012" +
    "\014\014\063\026\u0140\053\062\054\016\055\027\056\026" +
    "\057\007\060\005\061\006\062\032\064\023\065\051\066" +
    "\020\067\064\074\052\104\043\105\065\106\035\001\002" +
    "\000\060\002\uff90\003\uff90\007\uff90\011\uff90\012\uff90\014" +
    "\uff90\026\uff90\053\uff90\054\uff90\055\uff90\056\uff90\057\uff90" +
    "\060\uff90\061\uff90\062\uff90\064\uff90\065\uff90\066\uff90\067" +
    "\uff90\074\uff90\104\uff90\105\uff90\106\uff90\001\002\000\004" +
    "\007\u0142\001\002\000\006\015\uff8e\032\uff8e\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\074\002\057\003\020\004\016\005\053\006" +
    "\045\007\043\010\056\011\040\012\014\013\003\015\047" +
    "\017\027\020\035\021\044\022\021\023\010\026\023\027" +
    "\037\030\052\034\030\035\046\036\024\037\060\040\033" +
    "\045\012\047\054\051\055\052\007\053\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\004\223\005\053\006\045\007\043\010\056\011\040" +
    "\012\014\013\003\015\047\017\027\020\035\021\044\022" +
    "\021\023\010\026\023\027\037\030\052\034\030\035\046" +
    "\036\024\037\060\040\033\045\012\047\054\051\055\052" +
    "\007\053\011\001\001\000\002\001\001\000\024\014\375" +
    "\031\110\037\103\041\077\042\073\043\102\044\074\051" +
    "\067\052\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\014\322\031\110\037\103\041\077\042" +
    "\073\043\102\044\074\051\067\052\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\116\031\110" +
    "\037\103\041\077\042\073\043\102\044\074\050\107\051" +
    "\067\052\071\001\001\000\002\001\001\000\024\014\220" +
    "\031\110\037\103\041\077\042\073\043\102\044\074\051" +
    "\067\052\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\014\217\031\110" +
    "\037\103\041\077\042\073\043\102\044\074\051\067\052" +
    "\071\001\001\000\026\013\212\014\213\031\110\037\103" +
    "\041\077\042\073\043\102\044\074\051\067\052\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\014\154\031\110\037\103\041\077\042\073" +
    "\043\102\044\074\051\067\052\071\001\001\000\024\014" +
    "\153\031\110\037\103\041\077\042\073\043\102\044\074" +
    "\051\067\052\071\001\001\000\024\014\152\031\110\037" +
    "\103\041\077\042\073\043\102\044\074\051\067\052\071" +
    "\001\001\000\024\014\151\031\110\037\103\041\077\042" +
    "\073\043\102\044\074\051\067\052\071\001\001\000\024" +
    "\014\150\031\110\037\103\041\077\042\073\043\102\044" +
    "\074\051\067\052\071\001\001\000\024\014\147\031\110" +
    "\037\103\041\077\042\073\043\102\044\074\051\067\052" +
    "\071\001\001\000\024\014\146\031\110\037\103\041\077" +
    "\042\073\043\102\044\074\051\067\052\071\001\001\000" +
    "\024\014\145\031\110\037\103\041\077\042\073\043\102" +
    "\044\074\051\067\052\071\001\001\000\024\014\144\031" +
    "\110\037\103\041\077\042\073\043\102\044\074\051\067" +
    "\052\071\001\001\000\024\014\143\031\110\037\103\041" +
    "\077\042\073\043\102\044\074\051\067\052\071\001\001" +
    "\000\024\014\142\031\110\037\103\041\077\042\073\043" +
    "\102\044\074\051\067\052\071\001\001\000\024\014\141" +
    "\031\110\037\103\041\077\042\073\043\102\044\074\051" +
    "\067\052\071\001\001\000\024\014\140\031\110\037\103" +
    "\041\077\042\073\043\102\044\074\051\067\052\071\001" +
    "\001\000\024\014\137\031\110\037\103\041\077\042\073" +
    "\043\102\044\074\051\067\052\071\001\001\000\024\014" +
    "\136\031\110\037\103\041\077\042\073\043\102\044\074" +
    "\051\067\052\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\014\156\031\110\037\103\041\077\042\073" +
    "\043\102\044\074\051\067\052\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\014\161\031\110\037\103" +
    "\041\077\042\073\043\102\044\074\051\067\052\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\014\166" +
    "\031\110\037\103\041\077\042\073\043\102\044\074\051" +
    "\067\052\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\014\201\031\110\037\103\041" +
    "\077\042\073\043\102\044\074\051\067\052\071\001\001" +
    "\000\002\001\001\000\026\014\116\031\110\037\103\041" +
    "\077\042\073\043\102\044\074\050\173\051\067\052\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\014\177\031\110\037\103" +
    "\041\077\042\073\043\102\044\074\051\067\052\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\014\204\031\110\037\103\041" +
    "\077\042\073\043\102\044\074\051\067\052\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\014\207\031" +
    "\110\037\103\041\077\042\073\043\102\044\074\051\067" +
    "\052\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\014\216\031\110\037\103\041\077\042" +
    "\073\043\102\044\074\051\067\052\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\072\003" +
    "\222\004\016\005\053\006\045\007\043\010\056\011\040" +
    "\012\014\013\003\015\047\017\027\020\035\021\044\022" +
    "\021\023\010\026\023\027\037\030\052\034\030\035\046" +
    "\036\024\037\060\040\033\045\012\047\054\051\055\052" +
    "\007\053\011\001\001\000\070\004\223\005\053\006\045" +
    "\007\043\010\056\011\040\012\014\013\003\015\047\017" +
    "\027\020\035\021\044\022\021\023\010\026\023\027\037" +
    "\030\052\034\030\035\046\036\024\037\060\040\033\045" +
    "\012\047\054\051\055\052\007\053\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\014" +
    "\227\031\110\037\103\041\077\042\073\043\102\044\074" +
    "\051\067\052\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\014\233\031\110\037\103" +
    "\041\077\042\073\043\102\044\074\051\067\052\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\014\244\031\110\037\103" +
    "\041\077\042\073\043\102\044\074\051\067\052\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\253\031\110\032\252\037\103\041\077\042\073" +
    "\043\102\044\074\051\067\052\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\014\257\031\110\037\103" +
    "\041\077\042\073\043\102\044\074\051\067\052\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\264\001" +
    "\001\000\026\014\253\031\110\032\273\037\103\041\077" +
    "\042\073\043\102\044\074\051\067\052\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\253\031\110\032\271\037\103\041" +
    "\077\042\073\043\102\044\074\051\067\052\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\014\312\031\110\037\103\041\077\042\073" +
    "\043\102\044\074\051\067\052\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\072\003\315\004\016\005\053" +
    "\006\045\007\043\010\056\011\040\012\014\013\003\015" +
    "\047\017\027\020\035\021\044\022\021\023\010\026\023" +
    "\027\037\030\052\034\030\035\046\036\024\037\060\040" +
    "\033\045\012\047\054\051\055\052\007\053\011\001\001" +
    "\000\070\004\223\005\053\006\045\007\043\010\056\011" +
    "\040\012\014\013\003\015\047\017\027\020\035\021\044" +
    "\022\021\023\010\026\023\027\037\030\052\034\030\035" +
    "\046\036\024\037\060\040\033\045\012\047\054\051\055" +
    "\052\007\053\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\014\346\031" +
    "\110\037\103\041\077\042\073\043\102\044\074\051\067" +
    "\052\071\001\001\000\002\001\001\000\024\014\332\031" +
    "\110\037\103\041\077\042\073\043\102\044\074\051\067" +
    "\052\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\014\337\031\110\037\103\041\077\042" +
    "\073\043\102\044\074\051\067\052\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\014" +
    "\343\031\110\037\103\041\077\042\073\043\102\044\074" +
    "\051\067\052\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\014\354\031\110\037\103\041\077\042\073\043" +
    "\102\044\074\051\067\052\071\001\001\000\024\014\352" +
    "\031\110\037\103\041\077\042\073\043\102\044\074\051" +
    "\067\052\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\014\357\031" +
    "\110\037\103\041\077\042\073\043\102\044\074\051\067" +
    "\052\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\014\362\031\110\037\103\041\077\042\073\043\102" +
    "\044\074\051\067\052\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\003\365\004\016\005\053\006\045" +
    "\007\043\010\056\011\040\012\014\013\003\015\047\017" +
    "\027\020\035\021\044\022\021\023\010\026\023\027\037" +
    "\030\052\034\030\035\046\036\024\037\060\040\033\045" +
    "\012\047\054\051\055\052\007\053\011\001\001\000\070" +
    "\004\223\005\053\006\045\007\043\010\056\011\040\012" +
    "\014\013\003\015\047\017\027\020\035\021\044\022\021" +
    "\023\010\026\023\027\037\030\052\034\030\035\046\036" +
    "\024\037\060\040\033\045\012\047\054\051\055\052\007" +
    "\053\011\001\001\000\002\001\001\000\004\010\371\001" +
    "\001\000\072\003\372\004\016\005\053\006\045\007\043" +
    "\010\056\011\040\012\014\013\003\015\047\017\027\020" +
    "\035\021\044\022\021\023\010\026\023\027\037\030\052" +
    "\034\030\035\046\036\024\037\060\040\033\045\012\047" +
    "\054\051\055\052\007\053\011\001\001\000\002\001\001" +
    "\000\070\004\223\005\053\006\045\007\043\010\056\011" +
    "\040\012\014\013\003\015\047\017\027\020\035\021\044" +
    "\022\021\023\010\026\023\027\037\030\052\034\030\035" +
    "\046\036\024\037\060\040\033\045\012\047\054\051\055" +
    "\052\007\053\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\u0101\024\377\025\u0102" +
    "\031\110\037\103\041\077\042\073\043\102\044\074\051" +
    "\067\052\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\u0101\024\u0104\031\110\037" +
    "\103\041\077\042\073\043\102\044\074\051\067\052\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\072\003\u0107\004\016\005\053\006\045\007\043" +
    "\010\056\011\040\012\014\013\003\015\047\017\027\020" +
    "\035\021\044\022\021\023\010\026\023\027\037\030\052" +
    "\034\030\035\046\036\024\037\060\040\033\045\012\047" +
    "\054\051\055\052\007\053\011\001\001\000\070\004\223" +
    "\005\053\006\045\007\043\010\056\011\040\012\014\013" +
    "\003\015\047\017\027\020\035\021\044\022\021\023\010" +
    "\026\023\027\037\030\052\034\030\035\046\036\024\037" +
    "\060\040\033\045\012\047\054\051\055\052\007\053\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\072\003" +
    "\u010b\004\016\005\053\006\045\007\043\010\056\011\040" +
    "\012\014\013\003\015\047\017\027\020\035\021\044\022" +
    "\021\023\010\026\023\027\037\030\052\034\030\035\046" +
    "\036\024\037\060\040\033\045\012\047\054\051\055\052" +
    "\007\053\011\001\001\000\070\004\223\005\053\006\045" +
    "\007\043\010\056\011\040\012\014\013\003\015\047\017" +
    "\027\020\035\021\044\022\021\023\010\026\023\027\037" +
    "\030\052\034\030\035\046\036\024\037\060\040\033\045" +
    "\012\047\054\051\055\052\007\053\011\001\001\000\002" +
    "\001\001\000\004\007\u010f\001\001\000\002\001\001\000" +
    "\024\014\u0110\031\110\037\103\041\077\042\073\043\102" +
    "\044\074\051\067\052\071\001\001\000\002\001\001\000" +
    "\010\016\u0114\017\u0115\020\u0113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\003\u0118\004\016\005\053\006\045" +
    "\007\043\010\056\011\040\012\014\013\003\015\047\017" +
    "\027\020\035\021\044\022\021\023\010\026\023\027\037" +
    "\030\052\034\030\035\046\036\024\037\060\040\033\045" +
    "\012\047\054\051\055\052\007\053\011\001\001\000\070" +
    "\004\223\005\053\006\045\007\043\010\056\011\040\012" +
    "\014\013\003\015\047\017\027\020\035\021\044\022\021" +
    "\023\010\026\023\027\037\030\052\034\030\035\046\036" +
    "\024\037\060\040\033\045\012\047\054\051\055\052\007" +
    "\053\011\001\001\000\002\001\001\000\024\014\u011b\031" +
    "\110\037\103\041\077\042\073\043\102\044\074\051\067" +
    "\052\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u011f\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\014\u0123\031\110\037\103\041" +
    "\077\042\073\043\102\044\074\051\067\052\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\014\253\031\110\032\u0129\037\103\041\077\042\073\043" +
    "\102\044\074\051\067\052\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u012f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\u0136\046\u0134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\072\003" +
    "\u0139\004\016\005\053\006\045\007\043\010\056\011\040" +
    "\012\014\013\003\015\047\017\027\020\035\021\044\022" +
    "\021\023\010\026\023\027\037\030\052\034\030\035\046" +
    "\036\024\037\060\040\033\045\012\047\054\051\055\052" +
    "\007\053\011\001\001\000\070\004\223\005\053\006\045" +
    "\007\043\010\056\011\040\012\014\013\003\015\047\017" +
    "\027\020\035\021\044\022\021\023\010\026\023\027\037" +
    "\030\052\034\030\035\046\036\024\037\060\040\033\045" +
    "\012\047\054\051\055\052\007\053\011\001\001\000\002" +
    "\001\001\000\004\013\u0140\001\001\000\002\001\001\000" +
    "\072\003\u013e\004\016\005\053\006\045\007\043\010\056" +
    "\011\040\012\014\013\003\015\047\017\027\020\035\021" +
    "\044\022\021\023\010\026\023\027\037\030\052\034\030" +
    "\035\046\036\024\037\060\040\033\045\012\047\054\051" +
    "\055\052\007\053\011\001\001\000\070\004\223\005\053" +
    "\006\045\007\043\010\056\011\040\012\014\013\003\015" +
    "\047\017\027\020\035\021\044\022\021\023\010\026\023" +
    "\027\037\030\052\034\030\035\046\036\024\037\060\040" +
    "\033\045\012\047\054\051\055\052\007\053\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= INCREMENTO PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= DECREMENTO PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= BK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= CT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= DEC_VEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= DEC_VEC2D 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= ASIG_VEC2D 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= DECL_LISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= APPEND_LISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= REMOVE_LISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= ASIG 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= ACC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= EXECUTEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= LLAMADA PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= RET 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= FUNCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= error PTCOMA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SMATCH ::= MATCH EXPRESION LLAVIZQ LIST_CASES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LIST_CASES ::= LIST_CASES CASE_MATCH 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Case> a = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LIST_CASES ::= CASE_MATCH 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CASE_MATCH ::= EXPRESION FLECHA LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Case(a, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_MATCH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CASE_MATCH ::= DEFAULT FLECHA LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Case(null, a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_MATCH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IMPRESION ::= PRINT PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= VAR ID DOSPT TIPOS PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("var", b, null, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= VAR ID DOSPT TIPOS IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("var", b, c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= CONST ID DOSPT TIPOS PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("const", b, null, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= CONST ID DOSPT TIPOS IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("const", b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CFOR ::= FOR PARIZQ ASIGNACION EXPRESION PTCOMA ACTU PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION ::= ID IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, null, null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER ELSE LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, c, null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(a, b, null, (If) c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SWHILE ::= WHILE PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWHILE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SDOWHILE ::= DO LLAVIZQ INSTRUCCIONES LLAVDER WHILE PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DoWhile(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SDOWHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INCREMENTO ::= ID INCRE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECREMENTO ::= ID DECRE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ACTU ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ACTU ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ACTU ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BK ::= BREAK PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BK",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CT ::= CONTINUE PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOS ::= RDOUBLE 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.DECIMAL);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPOS ::= RSTRING 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.VOID);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= EXPRESION IGUALA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= EXPRESION DIFER EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION MENORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= EXPRESION MAYORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVar(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= CARAC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a.charAt(1), new Tipo(tipoDato.CARACTER), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= RTRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= RFALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright );    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= PARIZQ TIPOS PARDER EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= ACC_VEC2D 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= ACC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= FUNC_ROUND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= FUNC_LENGTH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= FUNC_TOSTRING 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= FUNC_FIND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= RET 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DEC_VEC ::= VAR ID DOSPT TIPOS CORIZQ CORDER IGUAL CORIZQ LISTAVALORES CORDER PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector("var", b, a, c, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC_VEC",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DEC_VEC ::= CONST ID DOSPT TIPOS CORIZQ CORDER IGUAL CORIZQ LISTAVALORES CORDER PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector("const", b, a, c, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC_VEC",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LISTAVALORES ::= LISTAVALORES COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LISTAVALORES ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); ((LinkedList<Instruccion>)RESULT).add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DEC_VEC2D ::= VAR ID DOSPT TIPOS CORIZQ CORDER CORIZQ CORDER IGUAL CORIZQ LISTAVALORES2D CORDER PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> c = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector2D(b, a, c, false, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC_VEC2D",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DEC_VEC2D ::= CONST ID DOSPT TIPOS CORIZQ CORDER CORIZQ CORDER IGUAL CORIZQ LISTAVALORES2D CORDER PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> c = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector2D(b, a, c, true, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC_VEC2D",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ASIG_VEC2D ::= ID CORIZQ EXPRESION CORDER CORIZQ EXPRESION CORDER IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVector2D(b, a, c, d, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_VEC2D",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ACC_VEC2D ::= ID CORIZQ EXPRESION CORDER CORIZQ EXPRESION CORDER 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector2D(b, a, c, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACC_VEC2D",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LISTAVALORES2D ::= LISTAVALORES2D COMA CORIZQ LISTAVALORES CORDER 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2D",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LISTAVALORES2D ::= CORIZQ LISTAVALORES CORDER 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<LinkedList<Instruccion>>(); ((LinkedList<LinkedList<Instruccion>>)RESULT).add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2D",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECL_LISTA ::= LIST MENOR TIPOS MAYOR ID IGUAL NEW LIST PARIZQ PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		   RESULT = new DeclaracionLista(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_LISTA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // APPEND_LISTA ::= ID PUNTO APP PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AppendLista(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("APPEND_LISTA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // REMOVE_LISTA ::= ID PUNTO REM PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RemoveLista(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVE_LISTA",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ASIG ::= ID CORIZQ EXPRESION CORDER IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Asignacion(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ACC ::= ID CORIZQ EXPRESION CORDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Acceso(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACC",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNC_ROUND ::= ROUND PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncionRound(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_ROUND",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FUNC_LENGTH ::= LEN PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncionLength(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_LENGTH",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FUNC_TOSTRING ::= TOSTR PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncionToString(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_TOSTRING",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUNC_FIND ::= ID PUNTO FIND PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncionFind(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_FIND",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // METODO ::= TIPOS ID PARIZQ PARAMS PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Metodo(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // METODO ::= TIPOS ID PARIZQ PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PARAMS ::= PARAMS COMA TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PARAMS ::= TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXECUTEE ::= SW ID PARIZQ PARAMSCALL PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Execute(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXECUTEE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXECUTEE ::= SW ID PARIZQ PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new Execute(a, new LinkedList<Instruccion>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXECUTEE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LLAMADA ::= ID PARIZQ PARAMSCALL PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Llamada(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LLAMADA ::= ID PARIZQ PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // RET ::= RETURN EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Return(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RET",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // RET ::= RETURN PTCOMA 
            {
              Instruccion RESULT =null;
		  RESULT = new Return(null, 1, 1);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RET",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
