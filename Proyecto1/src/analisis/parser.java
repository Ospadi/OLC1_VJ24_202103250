
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.Casteo;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Match;
import instrucciones.Case;
import instrucciones.DeclaracionVector;
import instrucciones.AsignacionVector2D;
import instrucciones.DeclaracionVector2D;
import instrucciones.DeclaracionLista;
import instrucciones.AppendLista;
import instrucciones.RemoveLista;
import instrucciones.Asignacion;
import instrucciones.FuncionRound;
import instrucciones.FuncionLength;
import instrucciones.FuncionToString;
import instrucciones.FuncionFind;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVar;
import expresiones.Incremento;
import expresiones.Decremento;
import expresiones.AccesoVector2D;
import expresiones.Acceso;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\023\007\000\002\025\004\000\002\025\003\000\002\024" +
    "\007\000\002\024\007\000\002\005\007\000\002\006\007" +
    "\000\002\006\011\000\002\006\007\000\002\006\011\000" +
    "\002\015\014\000\002\007\006\000\002\010\011\000\002" +
    "\010\015\000\002\010\013\000\002\011\011\000\002\012" +
    "\013\000\002\017\004\000\002\020\004\000\002\016\005" +
    "\000\002\016\003\000\002\016\003\000\002\021\004\000" +
    "\002\022\004\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\014" +
    "\004\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\004" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\006\000\002\014\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\026\015\000" +
    "\002\026\015\000\002\032\005\000\002\032\003\000\002" +
    "\027\017\000\002\027\017\000\002\030\014\000\002\031" +
    "\011\000\002\033\007\000\002\033\005\000\002\034\015" +
    "\000\002\035\011\000\002\036\011\000\002\040\011\000" +
    "\002\037\006\000\002\041\006\000\002\042\006\000\002" +
    "\043\006\000\002\044\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\034\003\025\007\022\012\046\051\045\057" +
    "\004\060\021\062\014\063\036\064\011\065\047\070\027" +
    "\071\006\074\037\001\002\000\004\007\u0101\001\002\000" +
    "\040\002\ufff7\003\ufff7\007\ufff7\012\ufff7\024\ufff7\051\ufff7" +
    "\057\ufff7\060\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\070" +
    "\ufff7\071\ufff7\074\ufff7\001\002\000\004\011\u0100\001\002" +
    "\000\040\002\ufff6\003\ufff6\007\ufff6\012\ufff6\024\ufff6\051" +
    "\ufff6\057\ufff6\060\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6" +
    "\070\ufff6\071\ufff6\074\ufff6\001\002\000\040\002\ufffe\003" +
    "\ufffe\007\ufffe\012\ufffe\024\ufffe\051\ufffe\057\ufffe\060\ufffe" +
    "\062\ufffe\063\ufffe\064\ufffe\065\ufffe\070\ufffe\071\ufffe\074" +
    "\ufffe\001\002\000\004\027\361\001\002\000\036\002\000" +
    "\003\025\007\022\012\046\051\045\057\004\060\021\062" +
    "\014\063\036\064\011\065\047\070\027\071\006\074\037" +
    "\001\002\000\040\002\ufff2\003\ufff2\007\ufff2\012\ufff2\024" +
    "\ufff2\051\ufff2\057\ufff2\060\ufff2\062\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\070\ufff2\071\ufff2\074\ufff2\001\002\000\034\004" +
    "\062\005\076\006\063\007\072\010\057\015\056\027\066" +
    "\046\065\066\100\067\075\077\074\100\077\101\071\001" +
    "\002\000\040\002\ufff1\003\ufff1\007\ufff1\012\ufff1\024\ufff1" +
    "\051\ufff1\057\ufff1\060\ufff1\062\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\070\ufff1\071\ufff1\074\ufff1\001\002\000\040\002\uffec" +
    "\003\uffec\007\uffec\012\uffec\024\uffec\051\uffec\057\uffec\060" +
    "\uffec\062\uffec\063\uffec\064\uffec\065\uffec\070\uffec\071\uffec" +
    "\074\uffec\001\002\000\004\011\340\001\002\000\040\002" +
    "\uffee\003\uffee\007\uffee\012\uffee\024\uffee\051\uffee\057\uffee" +
    "\060\uffee\062\uffee\063\uffee\064\uffee\065\uffee\070\uffee\071" +
    "\uffee\074\uffee\001\002\000\004\027\325\001\002\000\014" +
    "\025\271\032\275\033\274\034\273\072\272\001\002\000" +
    "\040\002\uffeb\003\uffeb\007\uffeb\012\uffeb\024\uffeb\051\uffeb" +
    "\057\uffeb\060\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\070" +
    "\uffeb\071\uffeb\074\uffeb\001\002\000\004\011\270\001\002" +
    "\000\004\011\267\001\002\000\040\002\ufff0\003\ufff0\007" +
    "\ufff0\012\ufff0\024\ufff0\051\ufff0\057\ufff0\060\ufff0\062\ufff0" +
    "\063\ufff0\064\ufff0\065\ufff0\070\ufff0\071\ufff0\074\ufff0\001" +
    "\002\000\004\011\266\001\002\000\040\002\ufff8\003\ufff8" +
    "\007\ufff8\012\ufff8\024\ufff8\051\ufff8\057\ufff8\060\ufff8\062" +
    "\ufff8\063\ufff8\064\ufff8\065\ufff8\070\ufff8\071\ufff8\074\ufff8" +
    "\001\002\000\040\002\ufffb\003\ufffb\007\ufffb\012\ufffb\024" +
    "\ufffb\051\ufffb\057\ufffb\060\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\070\ufffb\071\ufffb\074\ufffb\001\002\000\040\002" +
    "\ufff3\003\ufff3\007\ufff3\012\ufff3\024\ufff3\051\ufff3\057\ufff3" +
    "\060\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\070\ufff3\071" +
    "\ufff3\074\ufff3\001\002\000\040\002\ufffc\003\ufffc\007\ufffc" +
    "\012\ufffc\024\ufffc\051\ufffc\057\ufffc\060\ufffc\062\ufffc\063" +
    "\ufffc\064\ufffc\065\ufffc\070\ufffc\071\ufffc\074\ufffc\001\002" +
    "\000\040\002\uffed\003\uffed\007\uffed\012\uffed\024\uffed\051" +
    "\uffed\057\uffed\060\uffed\062\uffed\063\uffed\064\uffed\065\uffed" +
    "\070\uffed\071\uffed\074\uffed\001\002\000\040\002\ufff9\003" +
    "\ufff9\007\ufff9\012\ufff9\024\ufff9\051\ufff9\057\ufff9\060\ufff9" +
    "\062\ufff9\063\ufff9\064\ufff9\065\ufff9\070\ufff9\071\ufff9\074" +
    "\ufff9\001\002\000\004\027\260\001\002\000\004\037\246" +
    "\001\002\000\040\002\ufffd\003\ufffd\007\ufffd\012\ufffd\024" +
    "\ufffd\051\ufffd\057\ufffd\060\ufffd\062\ufffd\063\ufffd\064\ufffd" +
    "\065\ufffd\070\ufffd\071\ufffd\074\ufffd\001\002\000\040\002" +
    "\uffef\003\uffef\007\uffef\012\uffef\024\uffef\051\uffef\057\uffef" +
    "\060\uffef\062\uffef\063\uffef\064\uffef\065\uffef\070\uffef\071" +
    "\uffef\074\uffef\001\002\000\040\002\ufffa\003\ufffa\007\ufffa" +
    "\012\ufffa\024\ufffa\051\ufffa\057\ufffa\060\ufffa\062\ufffa\063" +
    "\ufffa\064\ufffa\065\ufffa\070\ufffa\071\ufffa\074\ufffa\001\002" +
    "\000\004\002\245\001\002\000\040\002\uffea\003\uffea\007" +
    "\uffea\012\uffea\024\uffea\051\uffea\057\uffea\060\uffea\062\uffea" +
    "\063\uffea\064\uffea\065\uffea\070\uffea\071\uffea\074\uffea\001" +
    "\002\000\004\007\206\001\002\000\004\027\202\001\002" +
    "\000\004\023\050\001\002\000\034\003\025\007\022\012" +
    "\046\051\045\057\004\060\021\062\014\063\036\064\011" +
    "\065\047\070\027\071\006\074\037\001\002\000\036\003" +
    "\025\007\022\012\046\024\052\051\045\057\004\060\021" +
    "\062\014\063\036\064\011\065\047\070\027\071\006\074" +
    "\037\001\002\000\004\063\054\001\002\000\040\002\uffff" +
    "\003\uffff\007\uffff\012\uffff\024\uffff\051\uffff\057\uffff\060" +
    "\uffff\062\uffff\063\uffff\064\uffff\065\uffff\070\uffff\071\uffff" +
    "\074\uffff\001\002\000\004\027\055\001\002\000\034\004" +
    "\062\005\076\006\063\007\072\010\057\015\056\027\066" +
    "\046\065\066\100\067\075\077\074\100\077\101\071\001" +
    "\002\000\034\004\062\005\076\006\063\007\072\010\057" +
    "\015\056\027\066\046\065\066\100\067\075\077\074\100" +
    "\077\101\071\001\002\000\054\011\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\026" +
    "\uffb6\030\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\047\uffb6\001\002\000" +
    "\054\011\uffae\013\uffae\014\uffae\015\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\026\uffae\030\uffae\035\uffae\036" +
    "\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae" +
    "\045\uffae\047\uffae\001\002\000\054\011\uffac\013\uffac\014" +
    "\uffac\015\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\026\uffac\030\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\047\uffac\001\002" +
    "\000\054\011\uffb8\013\uffb8\014\uffb8\015\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\026\uffb8\030\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\047\uffb8\001\002\000\054\011\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\026\uffb9\030\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\047\uffb9\001" +
    "\002\000\054\011\uffaf\013\uffaf\014\uffaf\015\uffaf\017\uffaf" +
    "\020\uffaf\021\uffaf\022\uffaf\023\uffaf\026\uffaf\030\uffaf\035" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\047\uffaf\001\002\000\034\004\062\005" +
    "\076\006\063\007\072\010\057\015\056\027\066\046\065" +
    "\066\100\067\075\077\074\100\077\101\071\001\002\000" +
    "\046\004\062\005\076\006\063\007\072\010\057\015\056" +
    "\027\066\046\065\052\167\053\172\054\173\055\170\056" +
    "\171\066\100\067\075\077\074\100\077\101\071\001\002" +
    "\000\054\011\uffb0\013\uffb0\014\uffb0\015\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\026\uffb0\030\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\047\uffb0\001\002\000\054\011\uffad\013\uffad" +
    "\014\uffad\015\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\026\uffad\030\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\047\uffad\001" +
    "\002\000\004\027\163\001\002\000\060\011\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\025\150\026\uffb7\030\uffb7\035\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\047" +
    "\uffb7\072\151\001\002\000\054\011\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\026" +
    "\uffb1\030\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\045\uffb1\047\uffb1\001\002\000" +
    "\004\027\145\001\002\000\054\011\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\026" +
    "\uffb4\030\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\045\uffb4\047\uffb4\001\002\000" +
    "\054\011\uffba\013\uffba\014\uffba\015\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\026\uffba\030\uffba\035\uffba\036" +
    "\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba" +
    "\045\uffba\047\uffba\001\002\000\004\027\142\001\002\000" +
    "\054\011\uffb5\013\uffb5\014\uffb5\015\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\026\uffb5\030\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\045\uffb5\047\uffb5\001\002\000\042\014\112\015\104\017" +
    "\107\020\113\021\105\022\116\030\117\035\121\036\115" +
    "\037\106\040\110\041\114\042\111\043\120\044\102\045" +
    "\103\001\002\000\034\004\062\005\076\006\063\007\072" +
    "\010\057\015\056\027\066\046\065\066\100\067\075\077" +
    "\074\100\077\101\071\001\002\000\034\004\062\005\076" +
    "\006\063\007\072\010\057\015\056\027\066\046\065\066" +
    "\100\067\075\077\074\100\077\101\071\001\002\000\034" +
    "\004\062\005\076\006\063\007\072\010\057\015\056\027" +
    "\066\046\065\066\100\067\075\077\074\100\077\101\071" +
    "\001\002\000\034\004\062\005\076\006\063\007\072\010" +
    "\057\015\056\027\066\046\065\066\100\067\075\077\074" +
    "\100\077\101\071\001\002\000\034\004\062\005\076\006" +
    "\063\007\072\010\057\015\056\027\066\046\065\066\100" +
    "\067\075\077\074\100\077\101\071\001\002\000\034\004" +
    "\062\005\076\006\063\007\072\010\057\015\056\027\066" +
    "\046\065\066\100\067\075\077\074\100\077\101\071\001" +
    "\002\000\034\004\062\005\076\006\063\007\072\010\057" +
    "\015\056\027\066\046\065\066\100\067\075\077\074\100" +
    "\077\101\071\001\002\000\034\004\062\005\076\006\063" +
    "\007\072\010\057\015\056\027\066\046\065\066\100\067" +
    "\075\077\074\100\077\101\071\001\002\000\034\004\062" +
    "\005\076\006\063\007\072\010\057\015\056\027\066\046" +
    "\065\066\100\067\075\077\074\100\077\101\071\001\002" +
    "\000\034\004\062\005\076\006\063\007\072\010\057\015" +
    "\056\027\066\046\065\066\100\067\075\077\074\100\077" +
    "\101\071\001\002\000\034\004\062\005\076\006\063\007" +
    "\072\010\057\015\056\027\066\046\065\066\100\067\075" +
    "\077\074\100\077\101\071\001\002\000\034\004\062\005" +
    "\076\006\063\007\072\010\057\015\056\027\066\046\065" +
    "\066\100\067\075\077\074\100\077\101\071\001\002\000" +
    "\034\004\062\005\076\006\063\007\072\010\057\015\056" +
    "\027\066\046\065\066\100\067\075\077\074\100\077\101" +
    "\071\001\002\000\004\011\124\001\002\000\034\004\062" +
    "\005\076\006\063\007\072\010\057\015\056\027\066\046" +
    "\065\066\100\067\075\077\074\100\077\101\071\001\002" +
    "\000\034\004\062\005\076\006\063\007\072\010\057\015" +
    "\056\027\066\046\065\066\100\067\075\077\074\100\077" +
    "\101\071\001\002\000\054\011\uffc4\013\uffc4\014\112\015" +
    "\104\017\107\020\113\021\105\022\116\023\uffc4\026\uffc4" +
    "\030\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\047\uffc4\001\002\000\054" +
    "\011\uffbd\013\uffbd\014\112\015\104\017\107\020\113\021" +
    "\105\022\116\023\uffbd\026\uffbd\030\uffbd\035\121\036\115" +
    "\037\106\040\110\041\114\042\111\043\uffbd\044\102\045" +
    "\103\047\uffbd\001\002\000\040\002\uffd8\003\uffd8\007\uffd8" +
    "\012\uffd8\024\uffd8\051\uffd8\057\uffd8\060\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\070\uffd8\071\uffd8\074\uffd8\001\002" +
    "\000\054\011\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\020" +
    "\uffc5\021\105\022\uffc5\023\uffc5\026\uffc5\030\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\047\uffc5\001\002\000\054\011\uffc3\013\uffc3" +
    "\014\112\015\104\017\107\020\113\021\105\022\116\023" +
    "\uffc3\026\uffc3\030\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\047\uffc3\001" +
    "\002\000\054\011\uffc0\013\uffc0\014\112\015\104\017\107" +
    "\020\113\021\105\022\116\023\uffc0\026\uffc0\030\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\047\uffc0\001\002\000\054\011\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\017\uffc7\020\uffc7\021\105\022\uffc7" +
    "\023\uffc7\026\uffc7\030\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\047\uffc7" +
    "\001\002\000\054\011\uffca\013\uffca\014\uffca\015\uffca\017" +
    "\107\020\113\021\105\022\116\023\uffca\026\uffca\030\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\045\uffca\047\uffca\001\002\000\054\011\uffbf" +
    "\013\uffbf\014\112\015\104\017\107\020\113\021\105\022" +
    "\116\023\uffbf\026\uffbf\030\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\047" +
    "\uffbf\001\002\000\054\011\uffc1\013\uffc1\014\112\015\104" +
    "\017\107\020\113\021\105\022\116\023\uffc1\026\uffc1\030" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\047\uffc1\001\002\000\054\011" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8\020\uffc8\021\105" +
    "\022\uffc8\023\uffc8\026\uffc8\030\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\047\uffc8\001\002\000\054\011\uffc2\013\uffc2\014\112\015" +
    "\104\017\107\020\113\021\105\022\116\023\uffc2\026\uffc2" +
    "\030\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\047\uffc2\001\002\000\052" +
    "\011\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6\020\uffc6\022" +
    "\uffc6\023\uffc6\026\uffc6\030\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\047" +
    "\uffc6\001\002\000\054\011\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\017\107\020\113\021\105\022\116\023\uffc9\026\uffc9\030" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\047\uffc9\001\002\000\054\011" +
    "\uffbc\013\uffbc\014\112\015\104\017\107\020\113\021\105" +
    "\022\116\023\uffbc\026\uffbc\030\uffbc\035\121\036\115\037" +
    "\106\040\110\041\114\042\111\043\uffbc\044\uffbc\045\uffbc" +
    "\047\uffbc\001\002\000\054\011\uffbe\013\uffbe\014\112\015" +
    "\104\017\107\020\113\021\105\022\116\023\uffbe\026\uffbe" +
    "\030\uffbe\035\121\036\115\037\106\040\110\041\114\042" +
    "\111\043\uffbe\044\uffbe\045\103\047\uffbe\001\002\000\034" +
    "\004\062\005\076\006\063\007\072\010\057\015\056\027" +
    "\066\046\065\066\100\067\075\077\074\100\077\101\071" +
    "\001\002\000\042\014\112\015\104\017\107\020\113\021" +
    "\105\022\116\030\144\035\121\036\115\037\106\040\110" +
    "\041\114\042\111\043\120\044\102\045\103\001\002\000" +
    "\054\011\uff9b\013\uff9b\014\uff9b\015\uff9b\017\uff9b\020\uff9b" +
    "\021\uff9b\022\uff9b\023\uff9b\026\uff9b\030\uff9b\035\uff9b\036" +
    "\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b" +
    "\045\uff9b\047\uff9b\001\002\000\034\004\062\005\076\006" +
    "\063\007\072\010\057\015\056\027\066\046\065\066\100" +
    "\067\075\077\074\100\077\101\071\001\002\000\042\014" +
    "\112\015\104\017\107\020\113\021\105\022\116\030\147" +
    "\035\121\036\115\037\106\040\110\041\114\042\111\043" +
    "\120\044\102\045\103\001\002\000\054\011\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023" +
    "\uff9c\026\uff9c\030\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\047\uff9c\001" +
    "\002\000\034\004\062\005\076\006\063\007\072\010\057" +
    "\015\056\027\066\046\065\066\100\067\075\077\074\100" +
    "\077\101\071\001\002\000\004\102\152\001\002\000\004" +
    "\027\153\001\002\000\034\004\062\005\076\006\063\007" +
    "\072\010\057\015\056\027\066\046\065\066\100\067\075" +
    "\077\074\100\077\101\071\001\002\000\042\014\112\015" +
    "\104\017\107\020\113\021\105\022\116\030\155\035\121" +
    "\036\115\037\106\040\110\041\114\042\111\043\120\044" +
    "\102\045\103\001\002\000\054\011\uff99\013\uff99\014\uff99" +
    "\015\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\026" +
    "\uff99\030\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99" +
    "\042\uff99\043\uff99\044\uff99\045\uff99\047\uff99\001\002\000" +
    "\042\014\112\015\104\017\107\020\113\021\105\022\116" +
    "\026\157\035\121\036\115\037\106\040\110\041\114\042" +
    "\111\043\120\044\102\045\103\001\002\000\056\011\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\017\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\023\uff9d\025\160\026\uff9d\030\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\047\uff9d\001\002\000\034\004\062\005\076\006\063" +
    "\007\072\010\057\015\056\027\066\046\065\066\100\067" +
    "\075\077\074\100\077\101\071\001\002\000\042\014\112" +
    "\015\104\017\107\020\113\021\105\022\116\026\162\035" +
    "\121\036\115\037\106\040\110\041\114\042\111\043\120" +
    "\044\102\045\103\001\002\000\054\011\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\026\uffa4\030\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041" +
    "\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\047\uffa4\001\002" +
    "\000\034\004\062\005\076\006\063\007\072\010\057\015" +
    "\056\027\066\046\065\066\100\067\075\077\074\100\077" +
    "\101\071\001\002\000\042\014\112\015\104\017\107\020" +
    "\113\021\105\022\116\030\165\035\121\036\115\037\106" +
    "\040\110\041\114\042\111\043\120\044\102\045\103\001" +
    "\002\000\054\011\uff9a\013\uff9a\014\uff9a\015\uff9a\017\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\023\uff9a\026\uff9a\030\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\044\uff9a\045\uff9a\047\uff9a\001\002\000\004\030\176\001" +
    "\002\000\014\011\uffd0\025\uffd0\030\uffd0\034\uffd0\041\uffd0" +
    "\001\002\000\014\011\uffcd\025\uffcd\030\uffcd\034\uffcd\041" +
    "\uffcd\001\002\000\014\011\uffcc\025\uffcc\030\uffcc\034\uffcc" +
    "\041\uffcc\001\002\000\014\011\uffcf\025\uffcf\030\uffcf\034" +
    "\uffcf\041\uffcf\001\002\000\014\011\uffce\025\uffce\030\uffce" +
    "\034\uffce\041\uffce\001\002\000\042\014\112\015\104\017" +
    "\107\020\113\021\105\022\116\030\175\035\121\036\115" +
    "\037\106\040\110\041\114\042\111\043\120\044\102\045" +
    "\103\001\002\000\054\011\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\026\uffb2\030" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\047\uffb2\001\002\000\034\004" +
    "\062\005\076\006\063\007\072\010\057\015\056\027\066" +
    "\046\065\066\100\067\075\077\074\100\077\101\071\001" +
    "\002\000\054\011\uffb3\013\uffb3\014\112\015\104\017\107" +
    "\020\113\021\105\022\116\023\uffb3\026\uffb3\030\uffb3\035" +
    "\121\036\115\037\106\040\110\041\114\042\111\043\120" +
    "\044\102\045\103\047\uffb3\001\002\000\054\011\uffbb\013" +
    "\uffbb\014\112\015\104\017\107\020\113\021\105\022\116" +
    "\023\uffbb\026\uffbb\030\uffbb\035\121\036\115\037\106\040" +
    "\110\041\114\042\111\043\uffbb\044\uffbb\045\uffbb\047\uffbb" +
    "\001\002\000\054\011\uffcb\013\uffcb\014\uffcb\015\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\026\uffcb\030\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\047\uffcb\001\002\000\034\004\062" +
    "\005\076\006\063\007\072\010\057\015\056\027\066\046" +
    "\065\066\100\067\075\077\074\100\077\101\071\001\002" +
    "\000\042\014\112\015\104\017\107\020\113\021\105\022" +
    "\116\030\204\035\121\036\115\037\106\040\110\041\114" +
    "\042\111\043\120\044\102\045\103\001\002\000\004\011" +
    "\205\001\002\000\040\002\uffe3\003\uffe3\007\uffe3\012\uffe3" +
    "\024\uffe3\051\uffe3\057\uffe3\060\uffe3\062\uffe3\063\uffe3\064" +
    "\uffe3\065\uffe3\070\uffe3\071\uffe3\074\uffe3\001\002\000\004" +
    "\031\207\001\002\000\014\052\167\053\172\054\173\055" +
    "\170\056\171\001\002\000\010\011\213\025\211\034\212" +
    "\001\002\000\004\026\216\001\002\000\034\004\062\005" +
    "\076\006\063\007\072\010\057\015\056\027\066\046\065" +
    "\066\100\067\075\077\074\100\077\101\071\001\002\000" +
    "\040\002\uffe2\003\uffe2\007\uffe2\012\uffe2\024\uffe2\051\uffe2" +
    "\057\uffe2\060\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\070" +
    "\uffe2\071\uffe2\074\uffe2\001\002\000\042\011\215\014\112" +
    "\015\104\017\107\020\113\021\105\022\116\035\121\036" +
    "\115\037\106\040\110\041\114\042\111\043\120\044\102" +
    "\045\103\001\002\000\040\002\uffe1\003\uffe1\007\uffe1\012" +
    "\uffe1\024\uffe1\051\uffe1\057\uffe1\060\uffe1\062\uffe1\063\uffe1" +
    "\064\uffe1\065\uffe1\070\uffe1\071\uffe1\074\uffe1\001\002\000" +
    "\006\025\217\034\220\001\002\000\004\026\230\001\002" +
    "\000\004\025\221\001\002\000\034\004\062\005\076\006" +
    "\063\007\072\010\057\015\056\027\066\046\065\066\100" +
    "\067\075\077\074\100\077\101\071\001\002\000\006\013" +
    "\224\026\225\001\002\000\044\013\uffa8\014\112\015\104" +
    "\017\107\020\113\021\105\022\116\026\uffa8\035\121\036" +
    "\115\037\106\040\110\041\114\042\111\043\120\044\102" +
    "\045\103\001\002\000\034\004\062\005\076\006\063\007" +
    "\072\010\057\015\056\027\066\046\065\066\100\067\075" +
    "\077\074\100\077\101\071\001\002\000\004\011\226\001" +
    "\002\000\040\002\uffab\003\uffab\007\uffab\012\uffab\024\uffab" +
    "\051\uffab\057\uffab\060\uffab\062\uffab\063\uffab\064\uffab\065" +
    "\uffab\070\uffab\071\uffab\074\uffab\001\002\000\044\013\uffa9" +
    "\014\112\015\104\017\107\020\113\021\105\022\116\026" +
    "\uffa9\035\121\036\115\037\106\040\110\041\114\042\111" +
    "\043\120\044\102\045\103\001\002\000\004\034\231\001" +
    "\002\000\004\025\232\001\002\000\004\025\233\001\002" +
    "\000\034\004\062\005\076\006\063\007\072\010\057\015" +
    "\056\027\066\046\065\066\100\067\075\077\074\100\077" +
    "\101\071\001\002\000\006\013\235\026\236\001\002\000" +
    "\004\025\240\001\002\000\004\011\237\001\002\000\040" +
    "\002\uffa7\003\uffa7\007\uffa7\012\uffa7\024\uffa7\051\uffa7\057" +
    "\uffa7\060\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\070\uffa7" +
    "\071\uffa7\074\uffa7\001\002\000\034\004\062\005\076\006" +
    "\063\007\072\010\057\015\056\027\066\046\065\066\100" +
    "\067\075\077\074\100\077\101\071\001\002\000\006\013" +
    "\224\026\242\001\002\000\006\013\uffa3\026\uffa3\001\002" +
    "\000\006\013\224\026\244\001\002\000\006\013\uffa2\026" +
    "\uffa2\001\002\000\004\002\001\001\002\000\014\052\167" +
    "\053\172\054\173\055\170\056\171\001\002\000\004\041" +
    "\250\001\002\000\004\007\251\001\002\000\004\034\252" +
    "\001\002\000\004\076\253\001\002\000\004\074\254\001" +
    "\002\000\004\027\255\001\002\000\004\030\256\001\002" +
    "\000\004\011\257\001\002\000\040\002\uffa1\003\uffa1\007" +
    "\uffa1\012\uffa1\024\uffa1\051\uffa1\057\uffa1\060\uffa1\062\uffa1" +
    "\063\uffa1\064\uffa1\065\uffa1\070\uffa1\071\uffa1\074\uffa1\001" +
    "\002\000\034\004\062\005\076\006\063\007\072\010\057" +
    "\015\056\027\066\046\065\066\100\067\075\077\074\100" +
    "\077\101\071\001\002\000\042\014\112\015\104\017\107" +
    "\020\113\021\105\022\116\030\262\035\121\036\115\037" +
    "\106\040\110\041\114\042\111\043\120\044\102\045\103" +
    "\001\002\000\004\023\263\001\002\000\034\003\025\007" +
    "\022\012\046\051\045\057\004\060\021\062\014\063\036" +
    "\064\011\065\047\070\027\071\006\074\037\001\002\000" +
    "\036\003\025\007\022\012\046\024\265\051\045\057\004" +
    "\060\021\062\014\063\036\064\011\065\047\070\027\071" +
    "\006\074\037\001\002\000\040\002\uffd9\003\uffd9\007\uffd9" +
    "\012\uffd9\024\uffd9\051\uffd9\057\uffd9\060\uffd9\062\uffd9\063" +
    "\uffd9\064\uffd9\065\uffd9\070\uffd9\071\uffd9\074\uffd9\001\002" +
    "\000\040\002\uffd2\003\uffd2\007\uffd2\012\uffd2\024\uffd2\051" +
    "\uffd2\057\uffd2\060\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2" +
    "\070\uffd2\071\uffd2\074\uffd2\001\002\000\040\002\uffe9\003" +
    "\uffe9\007\uffe9\012\uffe9\024\uffe9\051\uffe9\057\uffe9\060\uffe9" +
    "\062\uffe9\063\uffe9\064\uffe9\065\uffe9\070\uffe9\071\uffe9\074" +
    "\uffe9\001\002\000\040\002\ufff4\003\ufff4\007\ufff4\012\ufff4" +
    "\024\ufff4\051\ufff4\057\ufff4\060\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\070\ufff4\071\ufff4\074\ufff4\001\002\000\034" +
    "\004\062\005\076\006\063\007\072\010\057\015\056\027" +
    "\066\046\065\066\100\067\075\077\074\100\077\101\071" +
    "\001\002\000\006\073\300\075\301\001\002\000\034\004" +
    "\062\005\076\006\063\007\072\010\057\015\056\027\066" +
    "\046\065\066\100\067\075\077\074\100\077\101\071\001" +
    "\002\000\006\011\uffd6\030\uffd6\001\002\000\006\011\uffd7" +
    "\030\uffd7\001\002\000\042\011\277\014\112\015\104\017" +
    "\107\020\113\021\105\022\116\035\121\036\115\037\106" +
    "\040\110\041\114\042\111\043\120\044\102\045\103\001" +
    "\002\000\070\002\uffdd\003\uffdd\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\012\uffdd\015\uffdd\024\uffdd\027\uffdd\046" +
    "\uffdd\051\uffdd\057\uffdd\060\uffdd\062\uffdd\063\uffdd\064\uffdd" +
    "\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\074\uffdd\077" +
    "\uffdd\100\uffdd\101\uffdd\001\002\000\004\027\306\001\002" +
    "\000\004\027\302\001\002\000\034\004\062\005\076\006" +
    "\063\007\072\010\057\015\056\027\066\046\065\066\100" +
    "\067\075\077\074\100\077\101\071\001\002\000\042\014" +
    "\112\015\104\017\107\020\113\021\105\022\116\030\304" +
    "\035\121\036\115\037\106\040\110\041\114\042\111\043" +
    "\120\044\102\045\103\001\002\000\004\011\305\001\002" +
    "\000\040\002\uff9f\003\uff9f\007\uff9f\012\uff9f\024\uff9f\051" +
    "\uff9f\057\uff9f\060\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f" +
    "\070\uff9f\071\uff9f\074\uff9f\001\002\000\034\004\062\005" +
    "\076\006\063\007\072\010\057\015\056\027\066\046\065" +
    "\066\100\067\075\077\074\100\077\101\071\001\002\000" +
    "\042\014\112\015\104\017\107\020\113\021\105\022\116" +
    "\030\310\035\121\036\115\037\106\040\110\041\114\042" +
    "\111\043\120\044\102\045\103\001\002\000\004\011\311" +
    "\001\002\000\040\002\uffa0\003\uffa0\007\uffa0\012\uffa0\024" +
    "\uffa0\051\uffa0\057\uffa0\060\uffa0\062\uffa0\063\uffa0\064\uffa0" +
    "\065\uffa0\070\uffa0\071\uffa0\074\uffa0\001\002\000\042\014" +
    "\112\015\104\017\107\020\113\021\105\022\116\026\313" +
    "\035\121\036\115\037\106\040\110\041\114\042\111\043" +
    "\120\044\102\045\103\001\002\000\044\002\uff9d\003\uff9d" +
    "\007\uff9d\012\uff9d\024\uff9d\025\314\034\315\051\uff9d\057" +
    "\uff9d\060\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\070\uff9d" +
    "\071\uff9d\074\uff9d\001\002\000\034\004\062\005\076\006" +
    "\063\007\072\010\057\015\056\027\066\046\065\066\100" +
    "\067\075\077\074\100\077\101\071\001\002\000\034\004" +
    "\062\005\076\006\063\007\072\010\057\015\056\027\066" +
    "\046\065\066\100\067\075\077\074\100\077\101\071\001" +
    "\002\000\042\011\317\014\112\015\104\017\107\020\113" +
    "\021\105\022\116\035\121\036\115\037\106\040\110\041" +
    "\114\042\111\043\120\044\102\045\103\001\002\000\040" +
    "\002\uff9e\003\uff9e\007\uff9e\012\uff9e\024\uff9e\051\uff9e\057" +
    "\uff9e\060\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\070\uff9e" +
    "\071\uff9e\074\uff9e\001\002\000\042\014\112\015\104\017" +
    "\107\020\113\021\105\022\116\026\321\035\121\036\115" +
    "\037\106\040\110\041\114\042\111\043\120\044\102\045" +
    "\103\001\002\000\004\034\322\001\002\000\034\004\062" +
    "\005\076\006\063\007\072\010\057\015\056\027\066\046" +
    "\065\066\100\067\075\077\074\100\077\101\071\001\002" +
    "\000\042\011\324\014\112\015\104\017\107\020\113\021" +
    "\105\022\116\035\121\036\115\037\106\040\110\041\114" +
    "\042\111\043\120\044\102\045\103\001\002\000\040\002" +
    "\uffa5\003\uffa5\007\uffa5\012\uffa5\024\uffa5\051\uffa5\057\uffa5" +
    "\060\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\070\uffa5\071" +
    "\uffa5\074\uffa5\001\002\000\034\004\062\005\076\006\063" +
    "\007\072\010\057\015\056\027\066\046\065\066\100\067" +
    "\075\077\074\100\077\101\071\001\002\000\042\014\112" +
    "\015\104\017\107\020\113\021\105\022\116\030\327\035" +
    "\121\036\115\037\106\040\110\041\114\042\111\043\120" +
    "\044\102\045\103\001\002\000\004\023\330\001\002\000" +
    "\034\003\025\007\022\012\046\051\045\057\004\060\021" +
    "\062\014\063\036\064\011\065\047\070\027\071\006\074" +
    "\037\001\002\000\036\003\025\007\022\012\046\024\332" +
    "\051\045\057\004\060\021\062\014\063\036\064\011\065" +
    "\047\070\027\071\006\074\037\001\002\000\042\002\uffdc" +
    "\003\uffdc\007\uffdc\012\uffdc\024\uffdc\051\uffdc\057\uffdc\060" +
    "\uffdc\061\333\062\uffdc\063\uffdc\064\uffdc\065\uffdc\070\uffdc" +
    "\071\uffdc\074\uffdc\001\002\000\006\023\334\060\021\001" +
    "\002\000\034\003\025\007\022\012\046\051\045\057\004" +
    "\060\021\062\014\063\036\064\011\065\047\070\027\071" +
    "\006\074\037\001\002\000\040\002\uffda\003\uffda\007\uffda" +
    "\012\uffda\024\uffda\051\uffda\057\uffda\060\uffda\062\uffda\063" +
    "\uffda\064\uffda\065\uffda\070\uffda\071\uffda\074\uffda\001\002" +
    "\000\036\003\025\007\022\012\046\024\337\051\045\057" +
    "\004\060\021\062\014\063\036\064\011\065\047\070\027" +
    "\071\006\074\037\001\002\000\040\002\uffdb\003\uffdb\007" +
    "\uffdb\012\uffdb\024\uffdb\051\uffdb\057\uffdb\060\uffdb\062\uffdb" +
    "\063\uffdb\064\uffdb\065\uffdb\070\uffdb\071\uffdb\074\uffdb\001" +
    "\002\000\040\002\ufff5\003\ufff5\007\ufff5\012\ufff5\024\ufff5" +
    "\051\ufff5\057\ufff5\060\ufff5\062\ufff5\063\ufff5\064\ufff5\065" +
    "\ufff5\070\ufff5\071\ufff5\074\ufff5\001\002\000\042\014\112" +
    "\015\104\017\107\020\113\021\105\022\116\023\342\035" +
    "\121\036\115\037\106\040\110\041\114\042\111\043\120" +
    "\044\102\045\103\001\002\000\036\004\062\005\076\006" +
    "\063\007\072\010\057\015\056\027\066\046\065\050\344" +
    "\066\100\067\075\077\074\100\077\101\071\001\002\000" +
    "\040\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\015\uffe6" +
    "\024\uffe6\027\uffe6\046\uffe6\050\uffe6\066\uffe6\067\uffe6\077" +
    "\uffe6\100\uffe6\101\uffe6\001\002\000\004\047\355\001\002" +
    "\000\042\014\112\015\104\017\107\020\113\021\105\022" +
    "\116\035\121\036\115\037\106\040\110\041\114\042\111" +
    "\043\120\044\102\045\103\047\351\001\002\000\040\004" +
    "\062\005\076\006\063\007\072\010\057\015\056\024\347" +
    "\027\066\046\065\050\344\066\100\067\075\077\074\100" +
    "\077\101\071\001\002\000\040\002\uffe8\003\uffe8\007\uffe8" +
    "\012\uffe8\024\uffe8\051\uffe8\057\uffe8\060\uffe8\062\uffe8\063" +
    "\uffe8\064\uffe8\065\uffe8\070\uffe8\071\uffe8\074\uffe8\001\002" +
    "\000\040\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\015" +
    "\uffe7\024\uffe7\027\uffe7\046\uffe7\050\uffe7\066\uffe7\067\uffe7" +
    "\077\uffe7\100\uffe7\101\uffe7\001\002\000\004\023\352\001" +
    "\002\000\034\003\025\007\022\012\046\051\045\057\004" +
    "\060\021\062\014\063\036\064\011\065\047\070\027\071" +
    "\006\074\037\001\002\000\036\003\025\007\022\012\046" +
    "\024\354\051\045\057\004\060\021\062\014\063\036\064" +
    "\011\065\047\070\027\071\006\074\037\001\002\000\040" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\015\uffe5\024" +
    "\uffe5\027\uffe5\046\uffe5\050\uffe5\066\uffe5\067\uffe5\077\uffe5" +
    "\100\uffe5\101\uffe5\001\002\000\004\023\356\001\002\000" +
    "\034\003\025\007\022\012\046\051\045\057\004\060\021" +
    "\062\014\063\036\064\011\065\047\070\027\071\006\074" +
    "\037\001\002\000\036\003\025\007\022\012\046\024\360" +
    "\051\045\057\004\060\021\062\014\063\036\064\011\065" +
    "\047\070\027\071\006\074\037\001\002\000\040\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\015\uffe4\024\uffe4\027" +
    "\uffe4\046\uffe4\050\uffe4\066\uffe4\067\uffe4\077\uffe4\100\uffe4" +
    "\101\uffe4\001\002\000\004\007\362\001\002\000\004\034" +
    "\273\001\002\000\034\004\062\005\076\006\063\007\072" +
    "\010\057\015\056\027\066\046\065\066\100\067\075\077" +
    "\074\100\077\101\071\001\002\000\042\011\365\014\112" +
    "\015\104\017\107\020\113\021\105\022\116\035\121\036" +
    "\115\037\106\040\110\041\114\042\111\043\120\044\102" +
    "\045\103\001\002\000\004\007\366\001\002\000\010\032" +
    "\275\033\274\034\376\001\002\000\004\030\uffd3\001\002" +
    "\000\004\030\372\001\002\000\004\030\uffd4\001\002\000" +
    "\004\023\373\001\002\000\034\003\025\007\022\012\046" +
    "\051\045\057\004\060\021\062\014\063\036\064\011\065" +
    "\047\070\027\071\006\074\037\001\002\000\036\003\025" +
    "\007\022\012\046\024\375\051\045\057\004\060\021\062" +
    "\014\063\036\064\011\065\047\070\027\071\006\074\037" +
    "\001\002\000\040\002\uffde\003\uffde\007\uffde\012\uffde\024" +
    "\uffde\051\uffde\057\uffde\060\uffde\062\uffde\063\uffde\064\uffde" +
    "\065\uffde\070\uffde\071\uffde\074\uffde\001\002\000\034\004" +
    "\062\005\076\006\063\007\072\010\057\015\056\027\066" +
    "\046\065\066\100\067\075\077\074\100\077\101\071\001" +
    "\002\000\042\014\112\015\104\017\107\020\113\021\105" +
    "\022\116\030\uffd5\035\121\036\115\037\106\040\110\041" +
    "\114\042\111\043\120\044\102\045\103\001\002\000\040" +
    "\002\uffd1\003\uffd1\007\uffd1\012\uffd1\024\uffd1\051\uffd1\057" +
    "\uffd1\060\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\070\uffd1" +
    "\071\uffd1\074\uffd1\001\002\000\004\031\u0102\001\002\000" +
    "\014\052\167\053\172\054\173\055\170\056\171\001\002" +
    "\000\010\011\u0106\025\u0104\034\u0105\001\002\000\004\026" +
    "\u0109\001\002\000\034\004\062\005\076\006\063\007\072" +
    "\010\057\015\056\027\066\046\065\066\100\067\075\077" +
    "\074\100\077\101\071\001\002\000\040\002\uffe0\003\uffe0" +
    "\007\uffe0\012\uffe0\024\uffe0\051\uffe0\057\uffe0\060\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\065\uffe0\070\uffe0\071\uffe0\074\uffe0" +
    "\001\002\000\042\011\u0108\014\112\015\104\017\107\020" +
    "\113\021\105\022\116\035\121\036\115\037\106\040\110" +
    "\041\114\042\111\043\120\044\102\045\103\001\002\000" +
    "\040\002\uffdf\003\uffdf\007\uffdf\012\uffdf\024\uffdf\051\uffdf" +
    "\057\uffdf\060\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\070" +
    "\uffdf\071\uffdf\074\uffdf\001\002\000\006\025\u010a\034\u010b" +
    "\001\002\000\004\026\u0110\001\002\000\004\025\u010c\001" +
    "\002\000\034\004\062\005\076\006\063\007\072\010\057" +
    "\015\056\027\066\046\065\066\100\067\075\077\074\100" +
    "\077\101\071\001\002\000\006\013\224\026\u010e\001\002" +
    "\000\004\011\u010f\001\002\000\040\002\uffaa\003\uffaa\007" +
    "\uffaa\012\uffaa\024\uffaa\051\uffaa\057\uffaa\060\uffaa\062\uffaa" +
    "\063\uffaa\064\uffaa\065\uffaa\070\uffaa\071\uffaa\074\uffaa\001" +
    "\002\000\004\034\u0111\001\002\000\004\025\u0112\001\002" +
    "\000\004\025\233\001\002\000\006\013\235\026\u0114\001" +
    "\002\000\004\011\u0115\001\002\000\040\002\uffa6\003\uffa6" +
    "\007\uffa6\012\uffa6\024\uffa6\051\uffa6\057\uffa6\060\uffa6\062" +
    "\uffa6\063\uffa6\064\uffa6\065\uffa6\070\uffa6\071\uffa6\074\uffa6" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\060\002\042\003\011\004\007\005\037\006" +
    "\032\007\030\010\041\011\027\012\006\015\034\017\016" +
    "\020\023\021\031\022\012\023\004\026\014\027\025\030" +
    "\040\034\017\035\033\036\015\037\043\040\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\004\052\005\037\006\032\007\030\010\041\011\027\012" +
    "\006\015\034\017\016\020\023\021\031\022\012\023\004" +
    "\026\014\027\025\030\040\034\017\035\033\036\015\037" +
    "\043\040\022\001\001\000\002\001\001\000\020\014\340" +
    "\031\072\037\066\041\063\042\057\043\067\044\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\050\004\007\005\037" +
    "\006\032\007\030\010\041\011\027\012\006\015\034\017" +
    "\016\020\023\021\031\022\012\023\004\026\014\027\025" +
    "\030\040\034\017\035\033\036\015\037\043\040\022\001" +
    "\001\000\054\004\052\005\037\006\032\007\030\010\041" +
    "\011\027\012\006\015\034\017\016\020\023\021\031\022" +
    "\012\023\004\026\014\027\025\030\040\034\017\035\033" +
    "\036\015\037\043\040\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\014\100\031\072" +
    "\037\066\041\063\042\057\043\067\044\060\001\001\000" +
    "\020\014\200\031\072\037\066\041\063\042\057\043\067" +
    "\044\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\014\177\031\072\037\066\041\063\042" +
    "\057\043\067\044\060\001\001\000\022\013\165\014\173" +
    "\031\072\037\066\041\063\042\057\043\067\044\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\014\140\031\072\037" +
    "\066\041\063\042\057\043\067\044\060\001\001\000\020" +
    "\014\137\031\072\037\066\041\063\042\057\043\067\044" +
    "\060\001\001\000\020\014\136\031\072\037\066\041\063" +
    "\042\057\043\067\044\060\001\001\000\020\014\135\031" +
    "\072\037\066\041\063\042\057\043\067\044\060\001\001" +
    "\000\020\014\134\031\072\037\066\041\063\042\057\043" +
    "\067\044\060\001\001\000\020\014\133\031\072\037\066" +
    "\041\063\042\057\043\067\044\060\001\001\000\020\014" +
    "\132\031\072\037\066\041\063\042\057\043\067\044\060" +
    "\001\001\000\020\014\131\031\072\037\066\041\063\042" +
    "\057\043\067\044\060\001\001\000\020\014\130\031\072" +
    "\037\066\041\063\042\057\043\067\044\060\001\001\000" +
    "\020\014\127\031\072\037\066\041\063\042\057\043\067" +
    "\044\060\001\001\000\020\014\126\031\072\037\066\041" +
    "\063\042\057\043\067\044\060\001\001\000\020\014\125" +
    "\031\072\037\066\041\063\042\057\043\067\044\060\001" +
    "\001\000\020\014\124\031\072\037\066\041\063\042\057" +
    "\043\067\044\060\001\001\000\002\001\001\000\020\014" +
    "\122\031\072\037\066\041\063\042\057\043\067\044\060" +
    "\001\001\000\020\014\121\031\072\037\066\041\063\042" +
    "\057\043\067\044\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\014\142\031\072\037" +
    "\066\041\063\042\057\043\067\044\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\014\145\031\072\037" +
    "\066\041\063\042\057\043\067\044\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\014\155\031\072\037" +
    "\066\041\063\042\057\043\067\044\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\014\153\031\072\037" +
    "\066\041\063\042\057\043\067\044\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\160\031\072\037\066\041\063\042\057" +
    "\043\067\044\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\163\031\072\037\066\041\063\042\057" +
    "\043\067\044\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\014\176\031\072" +
    "\037\066\041\063\042\057\043\067\044\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\014\202\031\072\037\066\041\063\042\057\043\067\044" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\014\213\031\072" +
    "\037\066\041\063\042\057\043\067\044\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\014" +
    "\222\031\072\032\221\037\066\041\063\042\057\043\067" +
    "\044\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\014\226\031\072\037\066\041\063\042\057\043\067" +
    "\044\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\233\001\001\000\022\014\222\031\072\032\242\037" +
    "\066\041\063\042\057\043\067\044\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\222\031\072\032\240\037\066\041\063" +
    "\042\057\043\067\044\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\260\031\072\037\066" +
    "\041\063\042\057\043\067\044\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\263\004\007\005\037" +
    "\006\032\007\030\010\041\011\027\012\006\015\034\017" +
    "\016\020\023\021\031\022\012\023\004\026\014\027\025" +
    "\030\040\034\017\035\033\036\015\037\043\040\022\001" +
    "\001\000\054\004\052\005\037\006\032\007\030\010\041" +
    "\011\027\012\006\015\034\017\016\020\023\021\031\022" +
    "\012\023\004\026\014\027\025\030\040\034\017\035\033" +
    "\036\015\037\043\040\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\014\311\031\072\037\066\041\063\042\057\043\067\044" +
    "\060\001\001\000\002\001\001\000\020\014\275\031\072" +
    "\037\066\041\063\042\057\043\067\044\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\302\031\072\037\066\041\063\042\057\043\067\044\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\306\031\072\037\066\041\063\042\057" +
    "\043\067\044\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\317\031\072\037\066\041\063\042\057\043" +
    "\067\044\060\001\001\000\020\014\315\031\072\037\066" +
    "\041\063\042\057\043\067\044\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\322\031\072\037\066\041\063\042\057\043" +
    "\067\044\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\325\031\072\037\066\041\063\042\057\043" +
    "\067\044\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\330\004\007\005\037\006\032\007\030\010" +
    "\041\011\027\012\006\015\034\017\016\020\023\021\031" +
    "\022\012\023\004\026\014\027\025\030\040\034\017\035" +
    "\033\036\015\037\043\040\022\001\001\000\054\004\052" +
    "\005\037\006\032\007\030\010\041\011\027\012\006\015" +
    "\034\017\016\020\023\021\031\022\012\023\004\026\014" +
    "\027\025\030\040\034\017\035\033\036\015\037\043\040" +
    "\022\001\001\000\002\001\001\000\004\010\334\001\001" +
    "\000\056\003\335\004\007\005\037\006\032\007\030\010" +
    "\041\011\027\012\006\015\034\017\016\020\023\021\031" +
    "\022\012\023\004\026\014\027\025\030\040\034\017\035" +
    "\033\036\015\037\043\040\022\001\001\000\002\001\001" +
    "\000\054\004\052\005\037\006\032\007\030\010\041\011" +
    "\027\012\006\015\034\017\016\020\023\021\031\022\012" +
    "\023\004\026\014\027\025\030\040\034\017\035\033\036" +
    "\015\037\043\040\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\014\344\024\342\025" +
    "\345\031\072\037\066\041\063\042\057\043\067\044\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\344\024\347\031\072\037\066\041\063" +
    "\042\057\043\067\044\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\352\004\007" +
    "\005\037\006\032\007\030\010\041\011\027\012\006\015" +
    "\034\017\016\020\023\021\031\022\012\023\004\026\014" +
    "\027\025\030\040\034\017\035\033\036\015\037\043\040" +
    "\022\001\001\000\054\004\052\005\037\006\032\007\030" +
    "\010\041\011\027\012\006\015\034\017\016\020\023\021" +
    "\031\022\012\023\004\026\014\027\025\030\040\034\017" +
    "\035\033\036\015\037\043\040\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\356\004\007\005\037" +
    "\006\032\007\030\010\041\011\027\012\006\015\034\017" +
    "\016\020\023\021\031\022\012\023\004\026\014\027\025" +
    "\030\040\034\017\035\033\036\015\037\043\040\022\001" +
    "\001\000\054\004\052\005\037\006\032\007\030\010\041" +
    "\011\027\012\006\015\034\017\016\020\023\021\031\022" +
    "\012\023\004\026\014\027\025\030\040\034\017\035\033" +
    "\036\015\037\043\040\022\001\001\000\002\001\001\000" +
    "\004\007\362\001\001\000\002\001\001\000\020\014\363" +
    "\031\072\037\066\041\063\042\057\043\067\044\060\001" +
    "\001\000\002\001\001\000\010\016\367\017\370\020\366" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\373" +
    "\004\007\005\037\006\032\007\030\010\041\011\027\012" +
    "\006\015\034\017\016\020\023\021\031\022\012\023\004" +
    "\026\014\027\025\030\040\034\017\035\033\036\015\037" +
    "\043\040\022\001\001\000\054\004\052\005\037\006\032" +
    "\007\030\010\041\011\027\012\006\015\034\017\016\020" +
    "\023\021\031\022\012\023\004\026\014\027\025\030\040" +
    "\034\017\035\033\036\015\037\043\040\022\001\001\000" +
    "\002\001\001\000\020\014\376\031\072\037\066\041\063" +
    "\042\057\043\067\044\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0102\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\014\u0106\031" +
    "\072\037\066\041\063\042\057\043\067\044\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\014\222\031\072\032\u010c\037\066\041\063\042\057\043" +
    "\067\044\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\u0112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= INCREMENTO PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= DECREMENTO PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= BK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= CT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= DEC_VEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= DEC_VEC2D 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= ASIG_VEC2D 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= DECL_LISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= APPEND_LISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= REMOVE_LISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= ASIG 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= ACC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= error PTCOMA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SMATCH ::= MATCH EXPRESION LLAVIZQ LIST_CASES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LIST_CASES ::= LIST_CASES CASE_MATCH 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Case> a = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LIST_CASES ::= CASE_MATCH 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_CASES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CASE_MATCH ::= EXPRESION FLECHA LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Case(a, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_MATCH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASE_MATCH ::= DEFAULT FLECHA LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Case(null, a, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE_MATCH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IMPRESION ::= PRINT PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= VAR ID DOSPT TIPOS PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("var", b, null, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= VAR ID DOSPT TIPOS IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("var", b, c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= CONST ID DOSPT TIPOS PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("const", b, null, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= CONST ID DOSPT TIPOS IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion("const", b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CFOR ::= FOR PARIZQ ASIGNACION EXPRESION PTCOMA ACTU PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION ::= ID IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, null, null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER ELSE LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, c, null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(a, b, null, (If) c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SWHILE ::= WHILE PARIZQ EXPRESION PARDER LLAVIZQ INSTRUCCIONES LLAVDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWHILE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SDOWHILE ::= DO LLAVIZQ INSTRUCCIONES LLAVDER WHILE PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DoWhile(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SDOWHILE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INCREMENTO ::= ID INCRE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECREMENTO ::= ID DECRE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ACTU ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ACTU ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ACTU ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTU",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BK ::= BREAK PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BK",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CT ::= CONTINUE PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPOS ::= RDOUBLE 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.DECIMAL);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPOS ::= RSTRING 
            {
              Tipo RESULT =null;
		   RESULT = new Tipo (tipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION IGUALA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION DIFER EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION MENORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION MAYORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVar(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= CARAC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a.charAt(1), new Tipo(tipoDato.CARACTER), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= RTRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= RFALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright );    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= PARIZQ TIPOS PARDER EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteo(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= ACC_VEC2D 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= ACC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= FUNC_ROUND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= FUNC_LENGTH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= FUNC_TOSTRING 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= FUNC_FIND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DEC_VEC ::= VAR ID DOSPT TIPOS CORIZQ CORDER IGUAL CORIZQ LISTAVALORES CORDER PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector("var", b, a, c, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC_VEC",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DEC_VEC ::= CONST ID DOSPT TIPOS CORIZQ CORDER IGUAL CORIZQ LISTAVALORES CORDER PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector("const", b, a, c, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC_VEC",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LISTAVALORES ::= LISTAVALORES COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTAVALORES ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); ((LinkedList<Instruccion>)RESULT).add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DEC_VEC2D ::= VAR ID DOSPT TIPOS CORIZQ CORDER CORIZQ CORDER IGUAL CORIZQ LISTAVALORES2D CORDER PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> c = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector2D(b, a, c, false, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC_VEC2D",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DEC_VEC2D ::= CONST ID DOSPT TIPOS CORIZQ CORDER CORIZQ CORDER IGUAL CORIZQ LISTAVALORES2D CORDER PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> c = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector2D(b, a, c, true, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC_VEC2D",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ASIG_VEC2D ::= ID CORIZQ EXPRESION CORDER CORIZQ EXPRESION CORDER IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVector2D(b, a, c, d, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_VEC2D",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ACC_VEC2D ::= ID CORIZQ EXPRESION CORDER CORIZQ EXPRESION CORDER 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector2D(b, a, c, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACC_VEC2D",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LISTAVALORES2D ::= LISTAVALORES2D COMA CORIZQ LISTAVALORES CORDER 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2D",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LISTAVALORES2D ::= CORIZQ LISTAVALORES CORDER 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<LinkedList<Instruccion>>(); ((LinkedList<LinkedList<Instruccion>>)RESULT).add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2D",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECL_LISTA ::= LIST MENOR TIPOS MAYOR ID IGUAL NEW LIST PARIZQ PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		   RESULT = new DeclaracionLista(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_LISTA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // APPEND_LISTA ::= ID PUNTO APP PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AppendLista(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("APPEND_LISTA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // REMOVE_LISTA ::= ID PUNTO REM PARIZQ EXPRESION PARDER PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RemoveLista(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVE_LISTA",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ASIG ::= ID CORIZQ EXPRESION CORDER IGUAL EXPRESION PTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Asignacion(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ACC ::= ID CORIZQ EXPRESION CORDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Acceso(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACC",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNC_ROUND ::= ROUND PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncionRound(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_ROUND",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNC_LENGTH ::= LEN PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncionLength(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_LENGTH",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNC_TOSTRING ::= TOSTR PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncionToString(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_TOSTRING",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNC_FIND ::= ID PUNTO FIND PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncionFind(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC_FIND",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
